name: Pull Request

on:
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:

  # Build and test DSL component
  build-dsl:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./DSL
    strategy:
      matrix:
        java-version: [11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v2.5.0
        with:
          distribution: adopt
          java-version: ${{ matrix.java-version }}
          cache: gradle

      # See https://docs.github.com/en/actions/guides/building-and-testing-java-with-gradle
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Test with Gradle
        run: ./gradlew check

      - name: Upload test report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Test report
          # upload-artifact does not use working-directory
          path: DSL/de.unibonn.simpleml/build/reports/tests/test/

      - name: Upload test coverage
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: actions/upload-artifact@v2
        with:
          name: Test coverage
          # upload-artifact does not use working-directory
          path: DSL/de.unibonn.simpleml/build/reports/kover/html/


  # Build and test Frontend component
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Frontend
    strategy:
      matrix:
        node-version: [16]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node ${{ matrix.python-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: Frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      # TODO: activate once there are unit tests
      #   - name: Test
      #     run: npm run test

      # TODO: Treat warnings as errors by removing CI=false
      - name: Build
        run: CI=false npm run build

  # Build and test Runtime component
  build-runtime:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Runtime
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

    # TODO: activate once there are unit tests
    #   - name: Install dependencies
    #     run: |
    #       python -m pip install --upgrade pip
    #       pip install -r requirements.txt

    #   - name: Test with pytest
    #     run: |
    #       pip install pytest
    #       pip install pytest-cov
    #       pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

    #   - name: Upload pytest test results
    #     if: ${{ failure() }}
    #     uses: actions/upload-artifact@v2
    #     with:
    #       name: pytest-results-${{ matrix.python-version }}
    #       path: junit/test-results-${{ matrix.python-version }}.xml
