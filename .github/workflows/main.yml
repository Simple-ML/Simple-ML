name: Main
on:
  push:
    branches: [main]

jobs:
  # Build and test DSL component
  build-dsl:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./DSL
    strategy:
      matrix:
        java-version: [11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v2.3.0
        with:
          distribution: adopt
          java-version: ${{ matrix.java-version }}

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-java${{ matrix.java-version }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-java${{ matrix.java-version }}-

      # See https://docs.github.com/en/actions/guides/building-and-testing-java-with-gradle
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Test with Gradle
        run: ./gradlew check

      - name: Upload test report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: Test report
          path: de.unibonn.simpleml.tests/build/reports/tests/test

      # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
      # Restoring these files from a GitHub Actions cache might cause problems for future builds.
      - name: Cleanup Gradle cache
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  # Build and test Frontend component
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Frontend
    strategy:
      matrix:
        node-version: [16]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node ${{ matrix.python-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: Frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

    # TODO: activate once there are unit tests
    #   - name: Test
    #     run: npm run test

      # TODO: Treat warnings as errors by removing CI=false
      - name: Build
        run: CI=false npm run build

  # Build and test Runtime component
  build-runtime:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Runtime
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

    # TODO: activate once there are unit tests
    #   - name: Install dependencies
    #     run: |
    #       python -m pip install --upgrade pip
    #       pip install -r requirements.txt

    #   - name: Test with pytest
    #     run: |
    #       pip install pytest
    #       pip install pytest-cov
    #       pytest tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html

    #   - name: Upload pytest test results
    #     if: ${{ failure() }}
    #     uses: actions/upload-artifact@v2
    #     with:
    #       name: pytest-results-${{ matrix.python-version }}
    #       path: junit/test-results-${{ matrix.python-version }}.xml

  # Test interaction of Docker containers
  docker-smoke-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build the stack
        run: docker-compose up -d

      - name: Test
        run: docker run --network container:simple-ml_frontend appropriate/curl -s --retry 10 --retry-connrefused http://localhost:4200/
