package tests.staticAnalysis.purity

// Positive examples -----------------------------------------------------------

annotation CallsShouldBePure

// Call to class constructor

class C()

@CallsShouldBePure
step callOfClassConstructor() {
    C();
}

// Call to enum variant constructor

enum MyEnum {
    Variant()
}

@CallsShouldBePure
step callOfEnumVariantConstructor() {
    MyEnum.Variant();
}

// Pure function

@Pure
fun pureFunction()

@CallsShouldBePure
step callToPureFunction() {
    pureFunction();
}

// Pure lambdas

@CallsShouldBePure
step callToPureLambdas() {
    (() {})();
    (() -> null)();

    () {
        (() {})();
    };

    () -> (() -> null)();
}

// Pure steps

step pureStep() {}

@CallsShouldBePure
step callToPureSteps() {
    pureStep();
}

// Uncalled lambdas

step pureStepWithUncalledLambdas() {
    () -> impureFunction();
}

@CallsShouldBePure
step uncalledLambdas() {
    pureStepWithUncalledLambdas();
}

// Function as result

@CallsShouldBePure
step pureFunctionAsResult() {
    (() -> pureFunction)()();
}

// Function as parameter

@CallsShouldBePure
step pureFunctionAsParameter() {
    ((f) -> f())(pureFunction);
}

// Negative examples -----------------------------------------------------------

annotation CallsShouldNotBePure

// Callable type

@CallsShouldNotBePure
step callToCallableType(f: () -> ()) {
    f();
}

// Impure function

fun impureFunction()

@CallsShouldNotBePure
step callToImpureFunction() {
    impureFunction();
}

// Impure lambdas

@CallsShouldNotBePure
step callToImpureLambdas() {
    (() { impureFunction(); })();
    (() -> impureFunction())();

    () {
        (() { impureFunction(); })();
    };

    () -> (() -> impureFunction())();
}

// Impure steps

step impureStep() {
    impureFunction();
}

@CallsShouldNotBePure
step callToImpureSteps() {
    impureStep();
}

// Recursion

@CallsShouldNotBePure
step recursion() {
    recursion();
}

// Unresolved callable

@CallsShouldNotBePure
step unresolvedCallable() {
    unresolved();
}

// Function as parameter

@CallsShouldNotBePure
step impureFunctionAsParameter() {
    ((f) -> f())(impureFunction);
}
