package tests.languageTests.scoping.reference1

import tests.languageTests.scoping.reference2.AnnotationInOtherPackage1
import tests.languageTests.scoping.reference2.ClassInOtherPackage1
import tests.languageTests.scoping.reference2.EnumInOtherPackage1
import tests.languageTests.scoping.reference2.globalFunctionInOtherPackage1
import tests.languageTests.scoping.reference2.stepInOtherPackage1
import tests.languageTests.scoping.reference2.workflowInOtherPackage1

annotation AnnotationInSameFile

open class SuperClass {
    static attr superClassStaticAttribute: Int
    attr superClassInstanceAttribute: Int

    class ClassInSuperClass

    enum EnumInSuperClass

    static fun superClassStaticMethod()
    fun superClassInstanceMethod()
}
class ClassInSameFile<TYPE_PARAMETER_IN_SAME_FILE> constructor() sub SuperClass {
    static attr classStaticAttributeInSameFile: Int
    attr classInstanceAttributeInSameFile: Int

    class ClassInClassInSameFile

    enum EnumInClassInSameFile

    static fun classStaticMethodInSameFile() -> classStaticMethodResultInSameFile: Int
    fun classInstanceMethodInSameFile() -> classInstanceMethodResultInSameFile: Int
}

enum EnumInSameFile {
    EnumVariantInSameFile(enumVariantParameterInSameFile: Int)
}

fun globalFunctionInSameFile(globalFunctionParameterInSameFile: Int) -> globalFunctionResultInSameFile: Int
fun globalFunctionWithOneResultWithIdenticalMember() -> result: ClassForResultMemberAccess
fun globalFunctionWithTwoResults() -> (result1: Int, result2: Int)


step stepInSameFile(stepParameterInSameFile: Int) -> stepResultInSameFile: Int {
    val placeholderInSameFile = 1;
}
step stepWithOneResultWithIdenticalMember() -> result: ClassForResultMemberAccess {}
step stepWithTwoResults() -> (result1: Int, result2: Int) {}

workflow workflowInSameFile {}

open class SuperClassForOverriding constructor() {
    attr instanceAttributeForOverriding: Int
    open override fun instanceMethodForOverriding()
}
class SubClassForOverriding constructor()
sub SuperClassForOverriding {
    attr instanceAttributeForOverriding: Int
    override fun instanceMethodForOverriding()
}

open class SuperClassForHiding {
    static attr staticAttributeForHiding: Int
    class NestedClassForHiding
    enum NestedEnumForHiding
    static fun staticMethodForHiding()
}
class SubClassForHiding sub SuperClassForHiding {
    static attr staticAttributeForHiding: Int
    class NestedClassForHiding
    enum NestedEnumForHiding
    static fun staticMethodForHiding()
}

class ClassForResultMemberAccess constructor () {
    attr result: Int
}
enum EnumForResultMemberAccess {
    result
}


// Direct references -----------------------------------------------------------

step directReferencesToAnnotations() {
    AnnotationInSameFile;
    AnnotationInSamePackage;
    AnnotationInOtherPackage1;
    AnnotationInOtherPackage2;
}

step directReferencesToClasses() {
    ClassInSameFile;
    ClassInSamePackage;
    ClassInOtherPackage1;
    ClassInOtherPackage2;
}

step directReferencesToEnums() {
    EnumInSameFile;
    EnumInSamePackage;
    EnumInOtherPackage1;
    EnumInOtherPackage2;
}

step directReferencesToGlobalFunctions() {
    globalFunctionInSameFile;
    globalFunctionInSamePackage;
    globalFunctionInOtherPackage1;
    globalFunctionInOtherPackage2;
}

step directReferencesToLambdaYields() {
    val f = lambda {
        yield lambdaYield = 1;
        lambdaYield;
    };
}

step directReferencesToParameters(parameterInStep: Int) {
    parameterInStep;

    val f = lambda (parameterInLambda: Int) {
        parameterInStep;
        parameterInLambda;

        val f = lambda {
            parameterInStep;
            parameterInLambda;
        };
    };
}

step directReferencesToPlaceholders() {
    val placeholderInStep = 1;
    placeholderInStep;

    val f = lambda () {
        val placeholderInLambda = 1;
        placeholderInStep;
        placeholderInLambda;

        val f = lambda {
            placeholderInStep;
            placeholderInLambda;
        };
    };
}

step directReferencesToTypeParameters() {
    TYPE_PARAMETER_IN_SAME_FILE;
}

step directReferencesToWorkflowSteps() {
    stepInSameFile;
    stepInSamePackage;
    stepInOtherPackage1;
    stepInOtherPackage2;
}

step directReferencesToWorkflows() {
    workflowInSameFile;
    workflowInSamePackage;
    workflowInOtherPackage1;
    workflowInOtherPackage2;
}

step forwardReferences() {
    a;
    val f = lambda {
        a;
        f;
    };

    val a = 1;
}

step shadowedReferences(ClassInSameFile: Int) {
    ClassInSameFile;

    val ClassInSameFile = 1;
    ClassInSameFile;

    val f = lambda (ClassInSameFile: Int) {
        ClassInSameFile;

        val ClassInSameFile = 1;
        ClassInSameFile;
    };
}

// Access to own members -------------------------------------------------------

step referencesToClassMembers() {
    ClassInSameFile.classStaticAttributeInSameFile;
    ClassInSameFile<*>().classInstanceAttributeInSameFile;
    ClassInSameFile.ClassInClassInSameFile;
    ClassInSameFile.EnumInClassInSameFile;
    ClassInSameFile.classStaticMethodInSameFile;
    ClassInSameFile<*>().classInstanceMethodInSameFile();
}

step referencesToEnumVariants() {
    EnumInSameFile.EnumVariantInSameFile;
}

step referencesToEnumVariantParameters() {
    EnumInSameFile.EnumVariantInSameFile.enumVariantParameterInSameFile;
}


// Access to inherited members -------------------------------------------------

step referencesToInheritedClassMembers() {
    ClassInSameFile.superClassStaticAttribute;
    ClassInSameFile<*>().superClassInstanceAttribute;
    ClassInSameFile.ClassInSuperClass;
    ClassInSameFile.EnumInSuperClass;
    ClassInSameFile.superClassStaticMethod;
    ClassInSameFile<*>().superClassInstanceMethod();
}


// Overriding ------------------------------------------------------------------
step referencesToOverriddenMembers() {
    SuperClassForOverriding().instanceAttributeForOverriding;
    SuperClassForOverriding().instanceMethodForOverriding();

    SubClassForOverriding().instanceAttributeForOverriding;
    SubClassForOverriding().instanceMethodForOverriding();
}

// Hiding ----------------------------------------------------------------------
step referencesToHiddenMembers() {
    SubClassForHiding.staticAttributeForHiding;
    SubClassForHiding.NestedClassForHiding;
    SubClassForHiding.NestedEnumForHiding;
    SubClassForHiding.staticMethodForHiding;
}

// Access to static members from instance --------------------------------------

step referencesToStaticClassMembersFromInstance() {
    ClassInSameFile<*>().classStaticAttributeInSameFile;
    ClassInSameFile<*>().ClassInClassInSameFile;
    ClassInSameFile<*>().EnumInClassInSameFile;
    ClassInSameFile<*>().classStaticMethodInSameFile;

    ClassInSameFile<*>().superClassStaticAttribute;
    ClassInSameFile<*>().ClassInSuperClass;
    ClassInSameFile<*>().EnumInSuperClass;
    ClassInSameFile<*>().superClassStaticMethod;
}


// Access to instance members from class ---------------------------------------

step referencesToInstanceClassMembersFromClass() {
    ClassInSameFile.classInstanceAttributeInSameFile;
    ClassInSameFile.classInstanceMethodInSameFile();

    ClassInSameFile.superClassInstanceAttribute;
    ClassInSameFile.superClassInstanceMethod();
}


// Access to results of callable -----------------------------------------------

step referencesToCallableTypeResults(
    callableWithOneResult: callable () -> (singleResult: Int),
    callableWithOneResultWithIdenticalClassAttribute: callable () -> (result: ClassForResultMemberAccess),
    callableWithOneResultWithIdenticalEnumVariant: callable () -> (result: EnumForResultMemberAccess),
    callableWithTwoResults: callable () -> (result1: Int, result2: Int)
) {
    callableWithOneResult().singleResult;
    callableWithOneResultWithIdenticalClassAttribute().result;
    callableWithOneResultWithIdenticalEnumVariant().result;
    callableWithTwoResults().result1;
}

step referencesToFunctionResults() {
    globalFunctionInSameFile(1).globalFunctionResultInSameFile;
    globalFunctionWithOneResultWithIdenticalMember().result;
    globalFunctionWithTwoResults().result1;
}

step referencesToLambdaResults() {
    val lambdaWithOneResult = lambda {
        yield singleResult = 1;
    };
    val lambdaWithOneResultWithIdenticalMember = lambda {
        yield result = ClassForResultMemberAccess();
    };
    val lambdaWithTwoResults = lambda {
        yield result1 = 1;
        yield result2 = 1;
    };
    
    lambdaWithOneResult().singleResult;
    lambdaWithOneResultWithIdenticalMember().result;
    lambdaWithTwoResults().result1;
}

step referencesToWorkflowStepResults() {
    stepInSameFile(1).stepResultInSameFile;
    stepWithOneResultWithIdenticalMember().result;
    stepWithTwoResults().result1;
}

// Access to locals from outside -----------------------------------------------

step referencesToFunctionLocals() {
    globalFunctionParameterInSameFile;
    globalFunctionResultInSameFile;
}

step referencesToLambdaLocals() {
    val f = lambda (lambdaParameter: Int) {
        val lambdaPlaceholder = 1;
        yield lambdaYield = 1;
    };

    lambdaParameter;
    lambdaPlaceholder;
    lambdaYield;
}

step referencesToWorkflowStepLocals() {
    stepParameterInSameFile;
    stepResultInSameFile;
    placeholderInSameFile;
}

// Unqualified access to members -----------------------------------------------

step unqualifiedReferencesToClassMembers() {
    classStaticAttributeInSameFile;
    classInstanceAttributeInSameFile;

    ClassInClassInSameFile;
    EnumInClassInSameFile;

    classStaticMethodInSameFile;
    classInstanceMethodInSameFile;
}

step unqualifiedReferencesToEnumVariants() {
    EnumVariantInSameFile;
}

step unqualifiedReferencesToEnumVariantParameters() {
    enumVariantParameterInSameFile;
}


// Other unresolved references -------------------------------------------------

step unresolvedReferences() {
    unresolvedReference;
}
