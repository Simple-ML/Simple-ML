package myPackage

// Callable types ------------------------------------------------------------------------------------------------------
step myWorkflowStepWithSimpleCallableType(a: callable () -> ()) {}

step myWorkflowStepWithComplexCallableType(a: callable (o, p) -> (s, r)) {}


// Member types --------------------------------------------------------------------------------------------------------
step myWorkflowStepWithMemberType(a: A.B) {}


// Named types ---------------------------------------------------------------------------------------------------------
step myWorkflowStepWithSimpleResolvableNamedType(a: C) {}

step myWorkflowStepWithComplexResolvableNamedType(a: C<*>?) {}

step myWorkflowWithUnresolvableNamedType(a: MyUnresolvedDeclaration) {}


// Star projections ----------------------------------------------------------------------------------------------------
workflow myWorkflowWithStarProjection {
    val starProjection = C<*>();
}


// This types ----------------------------------------------------------------------------------------------------------
step myWorkflowStepWithThisType(a: this) {}


// Type arguments ------------------------------------------------------------------------------------------------------
class C<T>

workflow myWorkflowWithPositionalTypeArgument {
    C<*>();
}

workflow myWorkflowWithResolvableNamedTypeArgument {
    C<T = *>();
}

workflow myWorkflowWithUnresolvedTypeArgument {
    C<MY_UNRESOLVED_TYPE_PARAMETER = *>();
}


// Type parameter constraints ------------------------------------------------------------------------------------------
fun myFunctionWithResolvableTypeParameterConstraint<T>() where T sub Number

fun myFunctionWithUnresolvableTypeParameterConstraint() where MY_UNRESOLVED_TYPE_PARAMETER sub Number


// Type projections ----------------------------------------------------------------------------------------------------
workflow myWorkflowWithSimpleTypeProjection {
    C<Int>();
}

workflow myWorkflowWithComplexTypeProjection {
    C<out Int>();
}


// Union types ---------------------------------------------------------------------------------------------------------
step myWorkflowStepWithSimpleUnionType(a: union<>) {}

step myWorkflowStepWithComplexUnionType(a: union<Int, Number>) {}
