package myPackage

// Callable type -----------------------------------------------------------------------------------------------------------
step myWorkflowStepWithSimpleCallableType(a: callable () -> ()) {}

step myWorkflowStepWithComplexCallableType(a: callable (o, p) -> (s, r)) {}


// Member type -----------------------------------------------------------------------------------------------------------
step myWorkflowStepWithMemberType(a: A.B) {}


// Named type ----------------------------------------------------------------------------------------------------------
step myWorkflowStepWithSimpleResolvableNamedType(a: C) {}

step myWorkflowStepWithComplexResolvableNamedType(a: C<*>?) {}

step myWorkflowWithUnresolvableNamedType(a: MyUnresolvedDeclaration) {}


// Star projection -----------------------------------------------------------------------------------------------------
workflow myWorkflowWithStarProjection {
    val starProjection = C<*>();
}


// This type -----------------------------------------------------------------------------------------------------------
step myWorkflowStepWithThisType(a: this) {}


// Type argument -------------------------------------------------------------------------------------------------------
class C<T>

workflow myWorkflowWithPositionalTypeArgument {
    C<*>();
}

workflow myWorkflowWithResolvableNamedTypeArgument {
    C<T = *>();
}

workflow myWorkflowWithUnresolvedTypeArgument {
    C<MY_UNRESOLVED_TYPE_PARAMETER = *>();
}


// Type projection -----------------------------------------------------------------------------------------------------
workflow myWorkflowWithSimpleTypeProjection {
    C<Int>();
}

workflow myWorkflowWithComplexTypeProjection {
    C<out Int>();
}


// Union type ----------------------------------------------------------------------------------------------------------
step myWorkflowStepWithSimpleUnionType(a: union<>) {}

step myWorkflowStepWithComplexUnionType(a: union<Int, Number>) {}
