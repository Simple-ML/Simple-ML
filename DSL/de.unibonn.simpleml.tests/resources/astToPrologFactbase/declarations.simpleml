package myPackage

import myPackage.MyClass
import myPackage.MyOtherClass as Class
import myPackage.*


// Annotations ---------------------------------------------------------------------------------------------------------
annotation MySimpleAnnotation

@MySimpleAnnotation
deprecated annotation MyComplexAnnotation(
    a: Int,
    b: Int
)


// Classes, Attributes & Type parameters -------------------------------------------------------------------------------
class MySimpleClass

@MySimpleAnnotation
deprecated class MyComplexClass
    <MY_SIMPLE_TYPE_PARAMETER, @AnnotationUse deprecated out MY_COMPLEX_TYPE_PARAMETER>
    constructor(a, b)
    sub SuperClass1, SuperClass2
    where T1 super Number, T2 sub Number
{
    attr mySimpleAttribute
    @AnnotationUse deprecated attr myComplexAttribute: Int

    class MyClass
    enum MyEnum
    fun MyFunction()
}


// Enums & Enum instances ----------------------------------------------------------------------------------------------
enum MySimpleEnum

@MySimpleAnnotation
deprecated enum MyComplexEnum {
    MY_SIMPLE_INSTANCE,
    @AnnotationUse deprecated MY_COMPLEX_INSTANCE
}


// Functions, Parameters & Results -------------------------------------------------------------------------------------
fun mySimpleFunction()

@MySimpleAnnotation
deprecated fun myComplexFunction
    <T1, T2>
    (mySimpleParameter, @AnnotationUse deprecated vararg myComplexParameter: Int or 3)
    -> (mySimpleResult, @AnnotationUse deprecated myComplexResult: Int)
    where T1 super Number, T2 sub Number


// Workflows -----------------------------------------------------------------------------------------------------------
workflow mySimpleWorkflow {}

@MySimpleAnnotation
deprecated workflow myComplexWorkflow {
    val a = 1;
}


// Workflow steps ------------------------------------------------------------------------------------------------------
step mySimpleStep() {}

@MySimpleAnnotation
deprecated step myComplexStep (a, b) -> (a, b) {
    val a = 1;
}
