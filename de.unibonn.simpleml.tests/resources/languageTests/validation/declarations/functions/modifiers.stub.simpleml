package tests.modifiers

// semantic_error "A top-level function must not have this modifier."
// semantic_error "A top-level function must not have this modifier."
// semantic_error "A top-level function must not have this modifier."
»open« »override« »static« fun myFunction1()

// no_semantic_error "A top-level function must not have this modifier."
// no_semantic_error "A top-level function must not have this modifier."
// no_semantic_error "A top-level function must not have this modifier."
// no_semantic_error "A top-level function must not have this modifier."
// no_semantic_error "A top-level function must not have this modifier."
»deprecated« »private« »protected« »public« »pure« fun myFunction2()

class MyClass {
    // no_semantic_error "A class method must not have this modifier."
    // no_semantic_error "A class method must not have this modifier."
    // no_semantic_error "A class method must not have this modifier."
    // no_semantic_error "A class method must not have this modifier."
    // no_semantic_error "A class method must not have this modifier."
    // no_semantic_error "A class method must not have this modifier."
    // no_semantic_error "A class method must not have this modifier."
    // no_semantic_error "A class method must not have this modifier."
    »deprecated« »open« »override« »private« »protected« »public« »pure« »static« fun myFunction()
}

interface MyInterface {
    // semantic_error "An interface method must not have this modifier."
    »static« fun myFunction1()

    // no_semantic_error "An interface method must not have this modifier."
    // no_semantic_error "An interface method must not have this modifier."
    // no_semantic_error "An interface method must not have this modifier."
    // no_semantic_error "An interface method must not have this modifier."
    // no_semantic_error "An interface method must not have this modifier."
    // no_semantic_error "An interface method must not have this modifier."
    // no_semantic_error "An interface method must not have this modifier."
    »deprecated« »open« »override« »private« »protected« »public« »pure« fun myFunction2()

    // semantic_info "An interface method is always open."
    »open« fun myFunction3()
}