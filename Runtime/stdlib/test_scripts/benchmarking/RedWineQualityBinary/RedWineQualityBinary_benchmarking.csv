model,parameters,meanAbsoluteError,accuracy,balancedAccuracy,r2,source_code,dsl_code
LinearRegression,{},0.19677086273502653,0.865625,0.5,0.2866343202563014,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import LinearRegression
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = LinearRegression(**{})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.LinearRegression

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = LinearRegression();
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RidgeRegression,{},0.1967596074732735,0.865625,0.5,0.2865854077492421,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RidgeRegression
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RidgeRegression(**{})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RidgeRegression

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RidgeRegression();
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 1},0.19571269251349338,0.865625,0.5,0.19918025292175912,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 1})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=1);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 3},0.1516292421623235,0.865625,0.5,0.36886489292929625,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 3})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=3);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 5},0.13003721118121506,0.8875,0.5813953488372093,0.36071614359599413,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 5})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=5);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 7},0.11113217189551353,0.909375,0.7217278146251365,0.34624328155925455,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 7})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=7);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 9},0.11964258058738916,0.903125,0.727940559147007,0.14656942342496493,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 9})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=9);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.20057515482533822,0.865625,0.5,0.19996818050579723,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.1686263802714271,0.865625,0.5,0.3468951722907069,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.14911464688246232,0.865625,0.5,0.38848394606326164,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.13544072333567186,0.871875,0.5232558139534884,0.4494484132360256,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.13976772895629627,0.878125,0.5563344807320963,0.35126937601263064,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.13374999999999998,0.865625,0.5,-0.1219209134413568,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.130625,0.865625,0.5,-0.0907564436235413,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.130625,0.865625,0.5,-0.06066661069599544,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.134375,0.865625,0.5,-0.06281588447653452,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.13999999999999999,0.865625,0.5,-0.04669633112249216,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.23259250975537596,0.865625,0.5,0.015965041501273425,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.22616780600127395,0.865625,0.5,0.06094221065368266,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.21857048125586384,0.865625,0.5,0.0804023601245819,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.21715719431269384,0.865625,0.5,0.08476470097135813,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.21572317518268588,0.865625,0.5,0.07820309186046315,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.20027464918064034,0.865625,0.5,0.19508098478852653,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.16656520027603974,0.865625,0.5,0.37071346880987943,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.1464191042238708,0.865625,0.5,0.4521523415214612,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.13903153975268273,0.865625,0.5,0.455779090229378,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.1399927811156823,0.865625,0.5,0.4303590567762583,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.13416666666666666,0.865625,0.5,-0.1157119002975775,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.13125,0.865625,0.5,-0.05003964589221921,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.130625,0.865625,0.5,0.004766835511525236,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.13333333333333336,0.865625,0.5,0.017543074095840328,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.1375,0.865625,0.5,0.03784177091204188,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.2322403339422016,0.865625,0.5,0.020779354155090246,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.22710161396103365,0.865625,0.5,0.056754409163914166,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.22062721291545903,0.865625,0.5,0.08503587554938041,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.21894898470036414,0.865625,0.5,0.09208394411095511,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.21499063580025482,0.865625,0.5,0.09742332912919849,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.20016745335590444,0.865625,0.5,0.19602926512142482,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.16501211713564937,0.865625,0.5,0.38606065241241216,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.14323386303683075,0.865625,0.5,0.47290655249538405,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.13467511181828662,0.865625,0.5,0.4934887951937129,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.13375078996426595,0.865625,0.5,0.4853135128624665,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.134125,0.865625,0.5,-0.11121753001427259,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.13199999999999998,0.865625,0.5,-0.053574007220216435,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.13125,0.865625,0.5,-0.004484594072706072,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.133625,0.865625,0.5,0.008797917891024909,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.13699999999999998,0.865625,0.5,0.028098396440265128,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.23220040630894795,0.865625,0.5,0.024869746134485116,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.22613844259203747,0.865625,0.5,0.06281729226700461,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.22203863623043424,0.865625,0.5,0.08369357968128088,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.21878089840764398,0.865625,0.5,0.09955398746705535,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.21454461296059452,0.865625,0.5,0.10624051107446364,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.19945003909304956,0.865625,0.5,0.19536101018224972,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.16466305495813924,0.865625,0.5,0.38301341366963326,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.14375390317603282,0.865625,0.5,0.46884162909042504,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.13464141089583398,0.865625,0.5,0.5012067256498004,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.13392230580376616,0.865625,0.5,0.4905662071799103,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.13419642857142858,0.865625,0.5,-0.10466092910172242,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.13232142857142856,0.865625,0.5,-0.048977193093675986,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.13116071428571427,0.865625,0.5,0.0001271333821075693,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.13258928571428572,0.865625,0.5,0.024777987762983567,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.13526785714285713,0.865625,0.5,0.04556892188493222,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.23155609662130988,0.865625,0.5,0.02983035217253871,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.22611931892705597,0.865625,0.5,0.06564147213139526,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.22215987363024198,0.865625,0.5,0.08735298846232831,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.21833906137104675,0.865625,0.5,0.10641884838761329,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.2150139027183262,0.865625,0.5,0.11092562194966915,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.19950490874328558,0.865625,0.5,0.19794862616942988,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.16452209238140095,0.865625,0.5,0.3818026406625543,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.14439793265090697,0.865625,0.5,0.46940489557275045,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.13470061999469768,0.865625,0.5,0.5008931661528697,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.13406194604365634,0.865625,0.5,0.4956873410285101,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.13423611111111108,0.865625,0.5,-0.10988763369475874,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.13243055555555555,0.865625,0.5,-0.058809213601702215,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.13208333333333333,0.865625,0.5,-0.013236649181014304,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.13354166666666667,0.865625,0.5,0.017980889125209565,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.13597222222222222,0.865625,0.5,0.037815236667837815,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.2309279706251644,0.865625,0.5,0.030012630129339524,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.2254837302229098,0.865625,0.5,0.0641695597709141,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.22166799059901526,0.865625,0.5,0.08366956724310559,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.21794208113302735,0.865625,0.5,0.1028956081092004,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.21442979300286885,0.865625,0.5,0.10936069927254621,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.19992556063626793,0.865625,0.5,0.19767068103035645,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.16444929269284603,0.865625,0.5,0.38163361449862987,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.14535113195381882,0.865625,0.5,0.46446416524683776,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.1367857989346925,0.865625,0.5,0.4977781998540213,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.13584665354989095,0.865625,0.5,0.4938478987543009,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.13448863636363634,0.865625,0.5,-0.1141142537178288,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.13267045454545454,0.865625,0.5,-0.06441451786701813,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.13267045454545454,0.865625,0.5,-0.02604731649541292,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.13363636363636364,0.865625,0.5,0.0073730026623073375,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.1358522727272727,0.865625,0.5,0.03232056485046464,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.23140392108747143,0.865625,0.5,0.026497140461387625,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.22612508690779753,0.865625,0.5,0.05922569730946525,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.22295223042794313,0.865625,0.5,0.07644078018541611,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.21919711233068231,0.865625,0.5,0.09574991830395396,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.21541005092310622,0.865625,0.5,0.10613201451640975,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 1},0.134375,0.865625,0.5,-0.15523465703971118,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 1})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=1);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 3},0.096875,0.903125,0.698472000671648,0.16715641004113835,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 3})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=3);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 5},0.109375,0.890625,0.7207203425405088,0.05969272101418854,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 5})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=5);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 7},0.08125,0.91875,0.7762572412056084,0.3014860213248257,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 7})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=7);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 9},0.084375,0.915625,0.794097892704223,0.27462009906808826,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 9})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=9);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 1, 'randomState': 2022}",0.134375,0.865625,0.5,-0.15523465703971118,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 3, 'randomState': 2022}",0.115625,0.884375,0.599236000335824,0.00596087650071353,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 5, 'randomState': 2022}",0.096875,0.903125,0.7082948534967677,0.16715641004113835,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 7, 'randomState': 2022}",0.10625,0.89375,0.7028796910418941,0.086558643270926,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 9, 'randomState': 2022}",0.121875,0.878125,0.6840315674586517,-0.04777096801276137,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 1, 'randomState': 2022}",0.134375,0.865625,0.5,-0.15523465703971118,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 3, 'randomState': 2022}",0.121875,0.878125,0.566157333557216,-0.04777096801276137,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 5, 'randomState': 2022}",0.103125,0.896875,0.6555704810679204,0.11342456552766345,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 7, 'randomState': 2022}",0.0875,0.9125,0.7137100159516414,0.2477541768113508,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 9, 'randomState': 2022}",0.1,0.9,0.7163126521702627,0.1402904877844009,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 1, 'randomState': 2022}",0.134375,0.865625,0.5,-0.15523465703971118,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 3, 'randomState': 2022}",0.109375,0.890625,0.5930232558139534,0.05969272101418854,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 5, 'randomState': 2022}",0.1,0.9,0.657375535219545,0.1402904877844009,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 7, 'randomState': 2022}",0.090625,0.909375,0.7119049618000168,0.22088825455461336,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 9, 'randomState': 2022}",0.084375,0.915625,0.7449836285786249,0.27462009906808826,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 1, 'randomState': 2022}",0.134375,0.865625,0.5,-0.15523465703971118,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 3, 'randomState': 2022}",0.121875,0.878125,0.566157333557216,-0.04777096801276137,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 5, 'randomState': 2022}",0.09375,0.90625,0.6708084963479137,0.1940223322978758,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 7, 'randomState': 2022}",0.090625,0.909375,0.7020821089748972,0.22088825455461336,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 9, 'randomState': 2022}",0.084375,0.915625,0.7646293342288641,0.27462009906808826,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 1, 'randomState': 2022}",0.134375,0.865625,0.5,-0.15523465703971118,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 3, 'randomState': 2022}",0.1125,0.8875,0.5912182016623289,0.03282679875745098,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 5, 'randomState': 2022}",0.096875,0.903125,0.6690034421962892,0.16715641004113835,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 7, 'randomState': 2022}",0.090625,0.909375,0.7119049618000168,0.22088825455461336,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 9, 'randomState': 2022}",0.0875,0.9125,0.7628242800772396,0.2477541768113508,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 1, 'randomState': 2022}",0.134375,0.865625,0.5,-0.15523465703971118,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 3, 'randomState': 2022}",0.115625,0.884375,0.5795902946855848,0.00596087650071353,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 5, 'randomState': 2022}",0.096875,0.903125,0.6690034421962892,0.16715641004113835,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 7, 'randomState': 2022}",0.090625,0.909375,0.7020821089748972,0.22088825455461336,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 9, 'randomState': 2022}",0.090625,0.909375,0.7511963731004954,0.22088825455461336,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
ERRORSupportVectorMachineClassifier,"{'penalty': 'l1', 'loss': 'hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'}","Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True",,
ERRORSupportVectorMachineClassifier,"{'penalty': 'l1', 'loss': 'squared_hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'}","Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True",,
SupportVectorMachineClassifier,"{'penalty': 'l2', 'loss': 'hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'}",0.134375,0.865625,0.5,-0.15523465703971118,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import SupportVectorMachineClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = SupportVectorMachineClassifier(**{'penalty': 'l2', 'loss': 'hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.SupportVectorMachineClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = SupportVectorMachineClassifier(penalty=""l2"", loss=""hinge"", dual=true, tol=0.0001, c=1.0, multiClass=""ovr"");
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
SupportVectorMachineClassifier,"{'penalty': 'l2', 'loss': 'squared_hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'}",0.1125,0.8875,0.6206867601376879,0.03282679875745098,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import SupportVectorMachineClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = SupportVectorMachineClassifier(**{'penalty': 'l2', 'loss': 'squared_hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.SupportVectorMachineClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""RedWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = SupportVectorMachineClassifier(penalty=""l2"", loss=""squared_hinge"", dual=true, tol=0.0001, c=1.0, multiClass=""ovr"");
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
