@prefix mex-algo: <http://mex.aksw.org/mex-algo#> .
@prefix mex-perf: <http://mex.aksw.org/mex-perf#> .
@prefix sml: <https://simple-ml.de/resource/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

sml:Benchmark0LinearRegression a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:LinearRegression ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.LinearRegression\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = LinearRegression();\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:perfomance sml:Benchmark0LinearRegressionPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark100DecisionTreeClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.DecisionTreeClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeClassifier(maxDepth=7);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark100DecisionTreeClassifierParameter0 ;
    sml:perfomance sml:Benchmark100DecisionTreeClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark101DecisionTreeClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.DecisionTreeClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeClassifier(maxDepth=9);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark101DecisionTreeClassifierParameter0 ;
    sml:perfomance sml:Benchmark101DecisionTreeClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark102RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=5, maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark102RandomForestClassifierParameter0,
        sml:Benchmark102RandomForestClassifierParameter1,
        sml:Benchmark102RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark102RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark103RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=5, maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark103RandomForestClassifierParameter0,
        sml:Benchmark103RandomForestClassifierParameter1,
        sml:Benchmark103RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark103RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark104RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=5, maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark104RandomForestClassifierParameter0,
        sml:Benchmark104RandomForestClassifierParameter1,
        sml:Benchmark104RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark104RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark105RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=5, maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark105RandomForestClassifierParameter0,
        sml:Benchmark105RandomForestClassifierParameter1,
        sml:Benchmark105RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark105RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark106RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=5, maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark106RandomForestClassifierParameter0,
        sml:Benchmark106RandomForestClassifierParameter1,
        sml:Benchmark106RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark106RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark107RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=15, maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark107RandomForestClassifierParameter0,
        sml:Benchmark107RandomForestClassifierParameter1,
        sml:Benchmark107RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark107RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark108RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=15, maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark108RandomForestClassifierParameter0,
        sml:Benchmark108RandomForestClassifierParameter1,
        sml:Benchmark108RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark108RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark109RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=15, maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark109RandomForestClassifierParameter0,
        sml:Benchmark109RandomForestClassifierParameter1,
        sml:Benchmark109RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark109RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark10RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark10RandomForestRegressorParameter0,
        sml:Benchmark10RandomForestRegressorParameter1,
        sml:Benchmark10RandomForestRegressorParameter2,
        sml:Benchmark10RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark10RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark110RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=15, maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark110RandomForestClassifierParameter0,
        sml:Benchmark110RandomForestClassifierParameter1,
        sml:Benchmark110RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark110RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark111RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=15, maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark111RandomForestClassifierParameter0,
        sml:Benchmark111RandomForestClassifierParameter1,
        sml:Benchmark111RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark111RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark112RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=25, maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark112RandomForestClassifierParameter0,
        sml:Benchmark112RandomForestClassifierParameter1,
        sml:Benchmark112RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark112RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark113RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=25, maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark113RandomForestClassifierParameter0,
        sml:Benchmark113RandomForestClassifierParameter1,
        sml:Benchmark113RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark113RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark114RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=25, maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark114RandomForestClassifierParameter0,
        sml:Benchmark114RandomForestClassifierParameter1,
        sml:Benchmark114RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark114RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark115RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=25, maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark115RandomForestClassifierParameter0,
        sml:Benchmark115RandomForestClassifierParameter1,
        sml:Benchmark115RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark115RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark116RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=25, maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark116RandomForestClassifierParameter0,
        sml:Benchmark116RandomForestClassifierParameter1,
        sml:Benchmark116RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark116RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark117RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=35, maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark117RandomForestClassifierParameter0,
        sml:Benchmark117RandomForestClassifierParameter1,
        sml:Benchmark117RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark117RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark118RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=35, maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark118RandomForestClassifierParameter0,
        sml:Benchmark118RandomForestClassifierParameter1,
        sml:Benchmark118RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark118RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark119RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=35, maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark119RandomForestClassifierParameter0,
        sml:Benchmark119RandomForestClassifierParameter1,
        sml:Benchmark119RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark119RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark11RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark11RandomForestRegressorParameter0,
        sml:Benchmark11RandomForestRegressorParameter1,
        sml:Benchmark11RandomForestRegressorParameter2,
        sml:Benchmark11RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark11RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark120RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=35, maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark120RandomForestClassifierParameter0,
        sml:Benchmark120RandomForestClassifierParameter1,
        sml:Benchmark120RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark120RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark121RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=35, maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark121RandomForestClassifierParameter0,
        sml:Benchmark121RandomForestClassifierParameter1,
        sml:Benchmark121RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark121RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark122RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=45, maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark122RandomForestClassifierParameter0,
        sml:Benchmark122RandomForestClassifierParameter1,
        sml:Benchmark122RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark122RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark123RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=45, maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark123RandomForestClassifierParameter0,
        sml:Benchmark123RandomForestClassifierParameter1,
        sml:Benchmark123RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark123RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark124RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=45, maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark124RandomForestClassifierParameter0,
        sml:Benchmark124RandomForestClassifierParameter1,
        sml:Benchmark124RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark124RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark125RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=45, maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark125RandomForestClassifierParameter0,
        sml:Benchmark125RandomForestClassifierParameter1,
        sml:Benchmark125RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark125RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark126RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=45, maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark126RandomForestClassifierParameter0,
        sml:Benchmark126RandomForestClassifierParameter1,
        sml:Benchmark126RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark126RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark127RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=55, maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark127RandomForestClassifierParameter0,
        sml:Benchmark127RandomForestClassifierParameter1,
        sml:Benchmark127RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark127RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark128RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=55, maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark128RandomForestClassifierParameter0,
        sml:Benchmark128RandomForestClassifierParameter1,
        sml:Benchmark128RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark128RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark129RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=55, maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark129RandomForestClassifierParameter0,
        sml:Benchmark129RandomForestClassifierParameter1,
        sml:Benchmark129RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark129RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark12RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark12RandomForestRegressorParameter0,
        sml:Benchmark12RandomForestRegressorParameter1,
        sml:Benchmark12RandomForestRegressorParameter2,
        sml:Benchmark12RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark12RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark130RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=55, maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark130RandomForestClassifierParameter0,
        sml:Benchmark130RandomForestClassifierParameter1,
        sml:Benchmark130RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark130RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark131RandomForestClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.RandomForestClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestClassifier(nEstimator=55, maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark131RandomForestClassifierParameter0,
        sml:Benchmark131RandomForestClassifierParameter1,
        sml:Benchmark131RandomForestClassifierParameter2 ;
    sml:perfomance sml:Benchmark131RandomForestClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark134SupportVectorMachineClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:SupportVectorMachineClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.SupportVectorMachineClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = SupportVectorMachineClassifier(penalty="l2", loss="hinge", dual=true, tol=0.0001, c=1.0, multiClass="ovr");\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark134SupportVectorMachineClassifierParameter0,
        sml:Benchmark134SupportVectorMachineClassifierParameter1,
        sml:Benchmark134SupportVectorMachineClassifierParameter2,
        sml:Benchmark134SupportVectorMachineClassifierParameter3,
        sml:Benchmark134SupportVectorMachineClassifierParameter4,
        sml:Benchmark134SupportVectorMachineClassifierParameter5 ;
    sml:perfomance sml:Benchmark134SupportVectorMachineClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark135SupportVectorMachineClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:SupportVectorMachineClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.SupportVectorMachineClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = SupportVectorMachineClassifier(penalty="l2", loss="squared_hinge", dual=true, tol=0.0001, c=1.0, multiClass="ovr");\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark135SupportVectorMachineClassifierParameter0,
        sml:Benchmark135SupportVectorMachineClassifierParameter1,
        sml:Benchmark135SupportVectorMachineClassifierParameter2,
        sml:Benchmark135SupportVectorMachineClassifierParameter3,
        sml:Benchmark135SupportVectorMachineClassifierParameter4,
        sml:Benchmark135SupportVectorMachineClassifierParameter5 ;
    sml:perfomance sml:Benchmark135SupportVectorMachineClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark13RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark13RandomForestRegressorParameter0,
        sml:Benchmark13RandomForestRegressorParameter1,
        sml:Benchmark13RandomForestRegressorParameter2,
        sml:Benchmark13RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark13RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark14RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark14RandomForestRegressorParameter0,
        sml:Benchmark14RandomForestRegressorParameter1,
        sml:Benchmark14RandomForestRegressorParameter2,
        sml:Benchmark14RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark14RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark15RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark15RandomForestRegressorParameter0,
        sml:Benchmark15RandomForestRegressorParameter1,
        sml:Benchmark15RandomForestRegressorParameter2,
        sml:Benchmark15RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark15RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark16RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark16RandomForestRegressorParameter0,
        sml:Benchmark16RandomForestRegressorParameter1,
        sml:Benchmark16RandomForestRegressorParameter2,
        sml:Benchmark16RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark16RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark17RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark17RandomForestRegressorParameter0,
        sml:Benchmark17RandomForestRegressorParameter1,
        sml:Benchmark17RandomForestRegressorParameter2,
        sml:Benchmark17RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark17RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark18RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark18RandomForestRegressorParameter0,
        sml:Benchmark18RandomForestRegressorParameter1,
        sml:Benchmark18RandomForestRegressorParameter2,
        sml:Benchmark18RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark18RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark19RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark19RandomForestRegressorParameter0,
        sml:Benchmark19RandomForestRegressorParameter1,
        sml:Benchmark19RandomForestRegressorParameter2,
        sml:Benchmark19RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark19RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark1RidgeRegression a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RidgeRegression ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RidgeRegression\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RidgeRegression();\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:perfomance sml:Benchmark1RidgeRegressionPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark20RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark20RandomForestRegressorParameter0,
        sml:Benchmark20RandomForestRegressorParameter1,
        sml:Benchmark20RandomForestRegressorParameter2,
        sml:Benchmark20RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark20RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark21RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark21RandomForestRegressorParameter0,
        sml:Benchmark21RandomForestRegressorParameter1,
        sml:Benchmark21RandomForestRegressorParameter2,
        sml:Benchmark21RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark21RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark22RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark22RandomForestRegressorParameter0,
        sml:Benchmark22RandomForestRegressorParameter1,
        sml:Benchmark22RandomForestRegressorParameter2,
        sml:Benchmark22RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark22RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark23RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark23RandomForestRegressorParameter0,
        sml:Benchmark23RandomForestRegressorParameter1,
        sml:Benchmark23RandomForestRegressorParameter2,
        sml:Benchmark23RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark23RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark24RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark24RandomForestRegressorParameter0,
        sml:Benchmark24RandomForestRegressorParameter1,
        sml:Benchmark24RandomForestRegressorParameter2,
        sml:Benchmark24RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark24RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark25RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark25RandomForestRegressorParameter0,
        sml:Benchmark25RandomForestRegressorParameter1,
        sml:Benchmark25RandomForestRegressorParameter2,
        sml:Benchmark25RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark25RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark26RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark26RandomForestRegressorParameter0,
        sml:Benchmark26RandomForestRegressorParameter1,
        sml:Benchmark26RandomForestRegressorParameter2,
        sml:Benchmark26RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark26RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark27RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark27RandomForestRegressorParameter0,
        sml:Benchmark27RandomForestRegressorParameter1,
        sml:Benchmark27RandomForestRegressorParameter2,
        sml:Benchmark27RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark27RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark28RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark28RandomForestRegressorParameter0,
        sml:Benchmark28RandomForestRegressorParameter1,
        sml:Benchmark28RandomForestRegressorParameter2,
        sml:Benchmark28RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark28RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark29RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark29RandomForestRegressorParameter0,
        sml:Benchmark29RandomForestRegressorParameter1,
        sml:Benchmark29RandomForestRegressorParameter2,
        sml:Benchmark29RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark29RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark2DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=1);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark2DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark2DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark30RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark30RandomForestRegressorParameter0,
        sml:Benchmark30RandomForestRegressorParameter1,
        sml:Benchmark30RandomForestRegressorParameter2,
        sml:Benchmark30RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark30RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark31RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark31RandomForestRegressorParameter0,
        sml:Benchmark31RandomForestRegressorParameter1,
        sml:Benchmark31RandomForestRegressorParameter2,
        sml:Benchmark31RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark31RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark32RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark32RandomForestRegressorParameter0,
        sml:Benchmark32RandomForestRegressorParameter1,
        sml:Benchmark32RandomForestRegressorParameter2,
        sml:Benchmark32RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark32RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark33RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark33RandomForestRegressorParameter0,
        sml:Benchmark33RandomForestRegressorParameter1,
        sml:Benchmark33RandomForestRegressorParameter2,
        sml:Benchmark33RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark33RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark34RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark34RandomForestRegressorParameter0,
        sml:Benchmark34RandomForestRegressorParameter1,
        sml:Benchmark34RandomForestRegressorParameter2,
        sml:Benchmark34RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark34RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark35RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark35RandomForestRegressorParameter0,
        sml:Benchmark35RandomForestRegressorParameter1,
        sml:Benchmark35RandomForestRegressorParameter2,
        sml:Benchmark35RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark35RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark36RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark36RandomForestRegressorParameter0,
        sml:Benchmark36RandomForestRegressorParameter1,
        sml:Benchmark36RandomForestRegressorParameter2,
        sml:Benchmark36RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark36RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark37RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark37RandomForestRegressorParameter0,
        sml:Benchmark37RandomForestRegressorParameter1,
        sml:Benchmark37RandomForestRegressorParameter2,
        sml:Benchmark37RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark37RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark38RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark38RandomForestRegressorParameter0,
        sml:Benchmark38RandomForestRegressorParameter1,
        sml:Benchmark38RandomForestRegressorParameter2,
        sml:Benchmark38RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark38RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark39RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark39RandomForestRegressorParameter0,
        sml:Benchmark39RandomForestRegressorParameter1,
        sml:Benchmark39RandomForestRegressorParameter2,
        sml:Benchmark39RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark39RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark3DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=3);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark3DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark3DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark40RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark40RandomForestRegressorParameter0,
        sml:Benchmark40RandomForestRegressorParameter1,
        sml:Benchmark40RandomForestRegressorParameter2,
        sml:Benchmark40RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark40RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark41RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark41RandomForestRegressorParameter0,
        sml:Benchmark41RandomForestRegressorParameter1,
        sml:Benchmark41RandomForestRegressorParameter2,
        sml:Benchmark41RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark41RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark42RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark42RandomForestRegressorParameter0,
        sml:Benchmark42RandomForestRegressorParameter1,
        sml:Benchmark42RandomForestRegressorParameter2,
        sml:Benchmark42RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark42RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark43RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark43RandomForestRegressorParameter0,
        sml:Benchmark43RandomForestRegressorParameter1,
        sml:Benchmark43RandomForestRegressorParameter2,
        sml:Benchmark43RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark43RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark44RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark44RandomForestRegressorParameter0,
        sml:Benchmark44RandomForestRegressorParameter1,
        sml:Benchmark44RandomForestRegressorParameter2,
        sml:Benchmark44RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark44RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark45RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark45RandomForestRegressorParameter0,
        sml:Benchmark45RandomForestRegressorParameter1,
        sml:Benchmark45RandomForestRegressorParameter2,
        sml:Benchmark45RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark45RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark46RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark46RandomForestRegressorParameter0,
        sml:Benchmark46RandomForestRegressorParameter1,
        sml:Benchmark46RandomForestRegressorParameter2,
        sml:Benchmark46RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark46RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark47RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark47RandomForestRegressorParameter0,
        sml:Benchmark47RandomForestRegressorParameter1,
        sml:Benchmark47RandomForestRegressorParameter2,
        sml:Benchmark47RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark47RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark48RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark48RandomForestRegressorParameter0,
        sml:Benchmark48RandomForestRegressorParameter1,
        sml:Benchmark48RandomForestRegressorParameter2,
        sml:Benchmark48RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark48RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark49RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark49RandomForestRegressorParameter0,
        sml:Benchmark49RandomForestRegressorParameter1,
        sml:Benchmark49RandomForestRegressorParameter2,
        sml:Benchmark49RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark49RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark4DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=5);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark4DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark4DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark50RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark50RandomForestRegressorParameter0,
        sml:Benchmark50RandomForestRegressorParameter1,
        sml:Benchmark50RandomForestRegressorParameter2,
        sml:Benchmark50RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark50RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark51RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark51RandomForestRegressorParameter0,
        sml:Benchmark51RandomForestRegressorParameter1,
        sml:Benchmark51RandomForestRegressorParameter2,
        sml:Benchmark51RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark51RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark52RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark52RandomForestRegressorParameter0,
        sml:Benchmark52RandomForestRegressorParameter1,
        sml:Benchmark52RandomForestRegressorParameter2,
        sml:Benchmark52RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark52RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark53RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark53RandomForestRegressorParameter0,
        sml:Benchmark53RandomForestRegressorParameter1,
        sml:Benchmark53RandomForestRegressorParameter2,
        sml:Benchmark53RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark53RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark54RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark54RandomForestRegressorParameter0,
        sml:Benchmark54RandomForestRegressorParameter1,
        sml:Benchmark54RandomForestRegressorParameter2,
        sml:Benchmark54RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark54RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark55RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark55RandomForestRegressorParameter0,
        sml:Benchmark55RandomForestRegressorParameter1,
        sml:Benchmark55RandomForestRegressorParameter2,
        sml:Benchmark55RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark55RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark56RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark56RandomForestRegressorParameter0,
        sml:Benchmark56RandomForestRegressorParameter1,
        sml:Benchmark56RandomForestRegressorParameter2,
        sml:Benchmark56RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark56RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark57RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark57RandomForestRegressorParameter0,
        sml:Benchmark57RandomForestRegressorParameter1,
        sml:Benchmark57RandomForestRegressorParameter2,
        sml:Benchmark57RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark57RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark58RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark58RandomForestRegressorParameter0,
        sml:Benchmark58RandomForestRegressorParameter1,
        sml:Benchmark58RandomForestRegressorParameter2,
        sml:Benchmark58RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark58RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark59RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark59RandomForestRegressorParameter0,
        sml:Benchmark59RandomForestRegressorParameter1,
        sml:Benchmark59RandomForestRegressorParameter2,
        sml:Benchmark59RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark59RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark5DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=7);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark5DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark5DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark60RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark60RandomForestRegressorParameter0,
        sml:Benchmark60RandomForestRegressorParameter1,
        sml:Benchmark60RandomForestRegressorParameter2,
        sml:Benchmark60RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark60RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark61RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark61RandomForestRegressorParameter0,
        sml:Benchmark61RandomForestRegressorParameter1,
        sml:Benchmark61RandomForestRegressorParameter2,
        sml:Benchmark61RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark61RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark62RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark62RandomForestRegressorParameter0,
        sml:Benchmark62RandomForestRegressorParameter1,
        sml:Benchmark62RandomForestRegressorParameter2,
        sml:Benchmark62RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark62RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark63RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark63RandomForestRegressorParameter0,
        sml:Benchmark63RandomForestRegressorParameter1,
        sml:Benchmark63RandomForestRegressorParameter2,
        sml:Benchmark63RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark63RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark64RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark64RandomForestRegressorParameter0,
        sml:Benchmark64RandomForestRegressorParameter1,
        sml:Benchmark64RandomForestRegressorParameter2,
        sml:Benchmark64RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark64RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark65RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark65RandomForestRegressorParameter0,
        sml:Benchmark65RandomForestRegressorParameter1,
        sml:Benchmark65RandomForestRegressorParameter2,
        sml:Benchmark65RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark65RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark66RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark66RandomForestRegressorParameter0,
        sml:Benchmark66RandomForestRegressorParameter1,
        sml:Benchmark66RandomForestRegressorParameter2,
        sml:Benchmark66RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark66RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark67RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark67RandomForestRegressorParameter0,
        sml:Benchmark67RandomForestRegressorParameter1,
        sml:Benchmark67RandomForestRegressorParameter2,
        sml:Benchmark67RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark67RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark68RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark68RandomForestRegressorParameter0,
        sml:Benchmark68RandomForestRegressorParameter1,
        sml:Benchmark68RandomForestRegressorParameter2,
        sml:Benchmark68RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark68RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark69RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark69RandomForestRegressorParameter0,
        sml:Benchmark69RandomForestRegressorParameter1,
        sml:Benchmark69RandomForestRegressorParameter2,
        sml:Benchmark69RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark69RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark6DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=9);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark6DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark6DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark70RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark70RandomForestRegressorParameter0,
        sml:Benchmark70RandomForestRegressorParameter1,
        sml:Benchmark70RandomForestRegressorParameter2,
        sml:Benchmark70RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark70RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark71RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark71RandomForestRegressorParameter0,
        sml:Benchmark71RandomForestRegressorParameter1,
        sml:Benchmark71RandomForestRegressorParameter2,
        sml:Benchmark71RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark71RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark72RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark72RandomForestRegressorParameter0,
        sml:Benchmark72RandomForestRegressorParameter1,
        sml:Benchmark72RandomForestRegressorParameter2,
        sml:Benchmark72RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark72RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark73RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark73RandomForestRegressorParameter0,
        sml:Benchmark73RandomForestRegressorParameter1,
        sml:Benchmark73RandomForestRegressorParameter2,
        sml:Benchmark73RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark73RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark74RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark74RandomForestRegressorParameter0,
        sml:Benchmark74RandomForestRegressorParameter1,
        sml:Benchmark74RandomForestRegressorParameter2,
        sml:Benchmark74RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark74RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark75RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark75RandomForestRegressorParameter0,
        sml:Benchmark75RandomForestRegressorParameter1,
        sml:Benchmark75RandomForestRegressorParameter2,
        sml:Benchmark75RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark75RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark76RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark76RandomForestRegressorParameter0,
        sml:Benchmark76RandomForestRegressorParameter1,
        sml:Benchmark76RandomForestRegressorParameter2,
        sml:Benchmark76RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark76RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark77RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark77RandomForestRegressorParameter0,
        sml:Benchmark77RandomForestRegressorParameter1,
        sml:Benchmark77RandomForestRegressorParameter2,
        sml:Benchmark77RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark77RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark78RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark78RandomForestRegressorParameter0,
        sml:Benchmark78RandomForestRegressorParameter1,
        sml:Benchmark78RandomForestRegressorParameter2,
        sml:Benchmark78RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark78RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark79RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark79RandomForestRegressorParameter0,
        sml:Benchmark79RandomForestRegressorParameter1,
        sml:Benchmark79RandomForestRegressorParameter2,
        sml:Benchmark79RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark79RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark7RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark7RandomForestRegressorParameter0,
        sml:Benchmark7RandomForestRegressorParameter1,
        sml:Benchmark7RandomForestRegressorParameter2,
        sml:Benchmark7RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark7RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark80RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark80RandomForestRegressorParameter0,
        sml:Benchmark80RandomForestRegressorParameter1,
        sml:Benchmark80RandomForestRegressorParameter2,
        sml:Benchmark80RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark80RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark81RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark81RandomForestRegressorParameter0,
        sml:Benchmark81RandomForestRegressorParameter1,
        sml:Benchmark81RandomForestRegressorParameter2,
        sml:Benchmark81RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark81RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark82RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark82RandomForestRegressorParameter0,
        sml:Benchmark82RandomForestRegressorParameter1,
        sml:Benchmark82RandomForestRegressorParameter2,
        sml:Benchmark82RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark82RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark83RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark83RandomForestRegressorParameter0,
        sml:Benchmark83RandomForestRegressorParameter1,
        sml:Benchmark83RandomForestRegressorParameter2,
        sml:Benchmark83RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark83RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark84RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark84RandomForestRegressorParameter0,
        sml:Benchmark84RandomForestRegressorParameter1,
        sml:Benchmark84RandomForestRegressorParameter2,
        sml:Benchmark84RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark84RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark85RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark85RandomForestRegressorParameter0,
        sml:Benchmark85RandomForestRegressorParameter1,
        sml:Benchmark85RandomForestRegressorParameter2,
        sml:Benchmark85RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark85RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark86RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark86RandomForestRegressorParameter0,
        sml:Benchmark86RandomForestRegressorParameter1,
        sml:Benchmark86RandomForestRegressorParameter2,
        sml:Benchmark86RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark86RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark87RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark87RandomForestRegressorParameter0,
        sml:Benchmark87RandomForestRegressorParameter1,
        sml:Benchmark87RandomForestRegressorParameter2,
        sml:Benchmark87RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark87RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark88RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark88RandomForestRegressorParameter0,
        sml:Benchmark88RandomForestRegressorParameter1,
        sml:Benchmark88RandomForestRegressorParameter2,
        sml:Benchmark88RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark88RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark89RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark89RandomForestRegressorParameter0,
        sml:Benchmark89RandomForestRegressorParameter1,
        sml:Benchmark89RandomForestRegressorParameter2,
        sml:Benchmark89RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark89RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark8RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark8RandomForestRegressorParameter0,
        sml:Benchmark8RandomForestRegressorParameter1,
        sml:Benchmark8RandomForestRegressorParameter2,
        sml:Benchmark8RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark8RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark90RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark90RandomForestRegressorParameter0,
        sml:Benchmark90RandomForestRegressorParameter1,
        sml:Benchmark90RandomForestRegressorParameter2,
        sml:Benchmark90RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark90RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark91RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark91RandomForestRegressorParameter0,
        sml:Benchmark91RandomForestRegressorParameter1,
        sml:Benchmark91RandomForestRegressorParameter2,
        sml:Benchmark91RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark91RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark92RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark92RandomForestRegressorParameter0,
        sml:Benchmark92RandomForestRegressorParameter1,
        sml:Benchmark92RandomForestRegressorParameter2,
        sml:Benchmark92RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark92RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark93RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark93RandomForestRegressorParameter0,
        sml:Benchmark93RandomForestRegressorParameter1,
        sml:Benchmark93RandomForestRegressorParameter2,
        sml:Benchmark93RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark93RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark94RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark94RandomForestRegressorParameter0,
        sml:Benchmark94RandomForestRegressorParameter1,
        sml:Benchmark94RandomForestRegressorParameter2,
        sml:Benchmark94RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark94RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark95RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark95RandomForestRegressorParameter0,
        sml:Benchmark95RandomForestRegressorParameter1,
        sml:Benchmark95RandomForestRegressorParameter2,
        sml:Benchmark95RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark95RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark96RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark96RandomForestRegressorParameter0,
        sml:Benchmark96RandomForestRegressorParameter1,
        sml:Benchmark96RandomForestRegressorParameter2,
        sml:Benchmark96RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark96RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark97DecisionTreeClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.DecisionTreeClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeClassifier(maxDepth=1);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark97DecisionTreeClassifierParameter0 ;
    sml:perfomance sml:Benchmark97DecisionTreeClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark98DecisionTreeClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.DecisionTreeClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeClassifier(maxDepth=3);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark98DecisionTreeClassifierParameter0 ;
    sml:perfomance sml:Benchmark98DecisionTreeClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark99DecisionTreeClassifier a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeClassifier ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.classification.DecisionTreeClassifier\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeClassifier(maxDepth=5);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark99DecisionTreeClassifierParameter0 ;
    sml:perfomance sml:Benchmark99DecisionTreeClassifierPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark9RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("RedWineQualityBinary");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark9RandomForestRegressorParameter0,
        sml:Benchmark9RandomForestRegressorParameter1,
        sml:Benchmark9RandomForestRegressorParameter2,
        sml:Benchmark9RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark9RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:RedWineQualityBinary .

sml:Benchmark0LinearRegressionPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.967709e-01 ;
    mex-perf:r2 2.866343e-01 .

sml:Benchmark100DecisionTreeClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark100DecisionTreeClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.1875e-01 ;
    mex-perf:balancedAccuracy 7.762572e-01 ;
    mex-perf:meanAbsoluteError 8.125e-02 ;
    mex-perf:r2 3.01486e-01 .

sml:Benchmark101DecisionTreeClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark101DecisionTreeClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.15625e-01 ;
    mex-perf:balancedAccuracy 7.940979e-01 ;
    mex-perf:meanAbsoluteError 8.4375e-02 ;
    mex-perf:r2 2.746201e-01 .

sml:Benchmark102RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark102RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark102RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark102RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34375e-01 ;
    mex-perf:r2 -1.552347e-01 .

sml:Benchmark103RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark103RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark103RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark103RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.84375e-01 ;
    mex-perf:balancedAccuracy 5.99236e-01 ;
    mex-perf:meanAbsoluteError 1.15625e-01 ;
    mex-perf:r2 5.960877e-03 .

sml:Benchmark104RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark104RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark104RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark104RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.03125e-01 ;
    mex-perf:balancedAccuracy 7.082949e-01 ;
    mex-perf:meanAbsoluteError 9.6875e-02 ;
    mex-perf:r2 1.671564e-01 .

sml:Benchmark105RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark105RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark105RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark105RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.9375e-01 ;
    mex-perf:balancedAccuracy 7.028797e-01 ;
    mex-perf:meanAbsoluteError 1.0625e-01 ;
    mex-perf:r2 8.655864e-02 .

sml:Benchmark106RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark106RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark106RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark106RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.78125e-01 ;
    mex-perf:balancedAccuracy 6.840316e-01 ;
    mex-perf:meanAbsoluteError 1.21875e-01 ;
    mex-perf:r2 -4.777097e-02 .

sml:Benchmark107RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark107RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark107RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark107RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34375e-01 ;
    mex-perf:r2 -1.552347e-01 .

sml:Benchmark108RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark108RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark108RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark108RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.78125e-01 ;
    mex-perf:balancedAccuracy 5.661573e-01 ;
    mex-perf:meanAbsoluteError 1.21875e-01 ;
    mex-perf:r2 -4.777097e-02 .

sml:Benchmark109RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark109RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark109RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark109RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.96875e-01 ;
    mex-perf:balancedAccuracy 6.555705e-01 ;
    mex-perf:meanAbsoluteError 1.03125e-01 ;
    mex-perf:r2 1.134246e-01 .

sml:Benchmark10RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark10RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark10RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark10RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark10RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.71875e-01 ;
    mex-perf:balancedAccuracy 5.232558e-01 ;
    mex-perf:meanAbsoluteError 1.354407e-01 ;
    mex-perf:r2 4.494484e-01 .

sml:Benchmark110RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark110RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark110RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark110RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.125e-01 ;
    mex-perf:balancedAccuracy 7.1371e-01 ;
    mex-perf:meanAbsoluteError 8.75e-02 ;
    mex-perf:r2 2.477542e-01 .

sml:Benchmark111RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark111RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark111RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark111RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9e-01 ;
    mex-perf:balancedAccuracy 7.163127e-01 ;
    mex-perf:meanAbsoluteError 1e-01 ;
    mex-perf:r2 1.402905e-01 .

sml:Benchmark112RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark112RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark112RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark112RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34375e-01 ;
    mex-perf:r2 -1.552347e-01 .

sml:Benchmark113RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark113RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark113RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark113RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.90625e-01 ;
    mex-perf:balancedAccuracy 5.930233e-01 ;
    mex-perf:meanAbsoluteError 1.09375e-01 ;
    mex-perf:r2 5.969272e-02 .

sml:Benchmark114RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark114RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark114RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark114RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9e-01 ;
    mex-perf:balancedAccuracy 6.573755e-01 ;
    mex-perf:meanAbsoluteError 1e-01 ;
    mex-perf:r2 1.402905e-01 .

sml:Benchmark115RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark115RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark115RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark115RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.09375e-01 ;
    mex-perf:balancedAccuracy 7.11905e-01 ;
    mex-perf:meanAbsoluteError 9.0625e-02 ;
    mex-perf:r2 2.208883e-01 .

sml:Benchmark116RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark116RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark116RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark116RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.15625e-01 ;
    mex-perf:balancedAccuracy 7.449836e-01 ;
    mex-perf:meanAbsoluteError 8.4375e-02 ;
    mex-perf:r2 2.746201e-01 .

sml:Benchmark117RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark117RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark117RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark117RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34375e-01 ;
    mex-perf:r2 -1.552347e-01 .

sml:Benchmark118RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark118RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark118RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark118RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.78125e-01 ;
    mex-perf:balancedAccuracy 5.661573e-01 ;
    mex-perf:meanAbsoluteError 1.21875e-01 ;
    mex-perf:r2 -4.777097e-02 .

sml:Benchmark119RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark119RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark119RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark119RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.0625e-01 ;
    mex-perf:balancedAccuracy 6.708085e-01 ;
    mex-perf:meanAbsoluteError 9.375e-02 ;
    mex-perf:r2 1.940223e-01 .

sml:Benchmark11RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark11RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark11RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark11RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark11RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.78125e-01 ;
    mex-perf:balancedAccuracy 5.563345e-01 ;
    mex-perf:meanAbsoluteError 1.397677e-01 ;
    mex-perf:r2 3.512694e-01 .

sml:Benchmark120RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark120RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark120RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark120RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.09375e-01 ;
    mex-perf:balancedAccuracy 7.020821e-01 ;
    mex-perf:meanAbsoluteError 9.0625e-02 ;
    mex-perf:r2 2.208883e-01 .

sml:Benchmark121RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark121RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark121RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark121RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.15625e-01 ;
    mex-perf:balancedAccuracy 7.646293e-01 ;
    mex-perf:meanAbsoluteError 8.4375e-02 ;
    mex-perf:r2 2.746201e-01 .

sml:Benchmark122RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark122RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark122RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark122RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34375e-01 ;
    mex-perf:r2 -1.552347e-01 .

sml:Benchmark123RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark123RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark123RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark123RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.875e-01 ;
    mex-perf:balancedAccuracy 5.912182e-01 ;
    mex-perf:meanAbsoluteError 1.125e-01 ;
    mex-perf:r2 3.28268e-02 .

sml:Benchmark124RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark124RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark124RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark124RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.03125e-01 ;
    mex-perf:balancedAccuracy 6.690034e-01 ;
    mex-perf:meanAbsoluteError 9.6875e-02 ;
    mex-perf:r2 1.671564e-01 .

sml:Benchmark125RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark125RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark125RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark125RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.09375e-01 ;
    mex-perf:balancedAccuracy 7.11905e-01 ;
    mex-perf:meanAbsoluteError 9.0625e-02 ;
    mex-perf:r2 2.208883e-01 .

sml:Benchmark126RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark126RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark126RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark126RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.125e-01 ;
    mex-perf:balancedAccuracy 7.628243e-01 ;
    mex-perf:meanAbsoluteError 8.75e-02 ;
    mex-perf:r2 2.477542e-01 .

sml:Benchmark127RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark127RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark127RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark127RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34375e-01 ;
    mex-perf:r2 -1.552347e-01 .

sml:Benchmark128RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark128RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark128RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark128RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.84375e-01 ;
    mex-perf:balancedAccuracy 5.795903e-01 ;
    mex-perf:meanAbsoluteError 1.15625e-01 ;
    mex-perf:r2 5.960877e-03 .

sml:Benchmark129RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark129RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark129RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark129RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.03125e-01 ;
    mex-perf:balancedAccuracy 6.690034e-01 ;
    mex-perf:meanAbsoluteError 9.6875e-02 ;
    mex-perf:r2 1.671564e-01 .

sml:Benchmark12RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark12RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark12RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark12RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark12RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.3375e-01 ;
    mex-perf:r2 -1.219209e-01 .

sml:Benchmark130RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark130RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark130RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark130RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.09375e-01 ;
    mex-perf:balancedAccuracy 7.020821e-01 ;
    mex-perf:meanAbsoluteError 9.0625e-02 ;
    mex-perf:r2 2.208883e-01 .

sml:Benchmark131RandomForestClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark131RandomForestClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark131RandomForestClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark131RandomForestClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.09375e-01 ;
    mex-perf:balancedAccuracy 7.511964e-01 ;
    mex-perf:meanAbsoluteError 9.0625e-02 ;
    mex-perf:r2 2.208883e-01 .

sml:Benchmark134SupportVectorMachineClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "penalty" ;
    sml:ParameterValue "l2" .

sml:Benchmark134SupportVectorMachineClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "loss" ;
    sml:ParameterValue "hinge" .

sml:Benchmark134SupportVectorMachineClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "dual" ;
    sml:ParameterValue true .

sml:Benchmark134SupportVectorMachineClassifierParameter3 a sml:Parameter ;
    sml:ParameterName "tol" ;
    sml:ParameterValue 1e-04 .

sml:Benchmark134SupportVectorMachineClassifierParameter4 a sml:Parameter ;
    sml:ParameterName "c" ;
    sml:ParameterValue 1e+00 .

sml:Benchmark134SupportVectorMachineClassifierParameter5 a sml:Parameter ;
    sml:ParameterName "multiClass" ;
    sml:ParameterValue "ovr" .

sml:Benchmark134SupportVectorMachineClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34375e-01 ;
    mex-perf:r2 -1.552347e-01 .

sml:Benchmark135SupportVectorMachineClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "penalty" ;
    sml:ParameterValue "l2" .

sml:Benchmark135SupportVectorMachineClassifierParameter1 a sml:Parameter ;
    sml:ParameterName "loss" ;
    sml:ParameterValue "squared_hinge" .

sml:Benchmark135SupportVectorMachineClassifierParameter2 a sml:Parameter ;
    sml:ParameterName "dual" ;
    sml:ParameterValue true .

sml:Benchmark135SupportVectorMachineClassifierParameter3 a sml:Parameter ;
    sml:ParameterName "tol" ;
    sml:ParameterValue 1e-04 .

sml:Benchmark135SupportVectorMachineClassifierParameter4 a sml:Parameter ;
    sml:ParameterName "c" ;
    sml:ParameterValue 1e+00 .

sml:Benchmark135SupportVectorMachineClassifierParameter5 a sml:Parameter ;
    sml:ParameterName "multiClass" ;
    sml:ParameterValue "ovr" .

sml:Benchmark135SupportVectorMachineClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.875e-01 ;
    mex-perf:balancedAccuracy 6.206868e-01 ;
    mex-perf:meanAbsoluteError 1.125e-01 ;
    mex-perf:r2 3.28268e-02 .

sml:Benchmark13RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark13RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark13RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark13RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark13RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.30625e-01 ;
    mex-perf:r2 -9.075644e-02 .

sml:Benchmark14RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark14RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark14RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark14RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark14RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.30625e-01 ;
    mex-perf:r2 -6.066661e-02 .

sml:Benchmark15RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark15RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark15RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark15RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark15RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34375e-01 ;
    mex-perf:r2 -6.281588e-02 .

sml:Benchmark16RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark16RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark16RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark16RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark16RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.4e-01 ;
    mex-perf:r2 -4.669633e-02 .

sml:Benchmark17RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark17RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark17RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark17RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark17RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.325925e-01 ;
    mex-perf:r2 1.596504e-02 .

sml:Benchmark18RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark18RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark18RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark18RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark18RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.261678e-01 ;
    mex-perf:r2 6.094221e-02 .

sml:Benchmark19RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark19RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark19RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark19RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark19RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.185705e-01 ;
    mex-perf:r2 8.040236e-02 .

sml:Benchmark1RidgeRegressionPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.967596e-01 ;
    mex-perf:r2 2.865854e-01 .

sml:Benchmark20RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark20RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark20RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark20RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark20RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.171572e-01 ;
    mex-perf:r2 8.47647e-02 .

sml:Benchmark21RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark21RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark21RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark21RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark21RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.157232e-01 ;
    mex-perf:r2 7.820309e-02 .

sml:Benchmark22RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark22RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark22RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark22RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark22RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.002746e-01 ;
    mex-perf:r2 1.95081e-01 .

sml:Benchmark23RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark23RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark23RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark23RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark23RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.665652e-01 ;
    mex-perf:r2 3.707135e-01 .

sml:Benchmark24RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark24RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark24RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark24RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark24RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.464191e-01 ;
    mex-perf:r2 4.521523e-01 .

sml:Benchmark25RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark25RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark25RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark25RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark25RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.390315e-01 ;
    mex-perf:r2 4.557791e-01 .

sml:Benchmark26RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark26RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark26RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark26RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark26RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.399928e-01 ;
    mex-perf:r2 4.303591e-01 .

sml:Benchmark27RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark27RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark27RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark27RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark27RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.341667e-01 ;
    mex-perf:r2 -1.157119e-01 .

sml:Benchmark28RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark28RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark28RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark28RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark28RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.3125e-01 ;
    mex-perf:r2 -5.003965e-02 .

sml:Benchmark29RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark29RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark29RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark29RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark29RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.30625e-01 ;
    mex-perf:r2 4.766836e-03 .

sml:Benchmark2DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark2DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.957127e-01 ;
    mex-perf:r2 1.991803e-01 .

sml:Benchmark30RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark30RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark30RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark30RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark30RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.333333e-01 ;
    mex-perf:r2 1.754307e-02 .

sml:Benchmark31RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark31RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark31RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark31RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark31RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.375e-01 ;
    mex-perf:r2 3.784177e-02 .

sml:Benchmark32RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark32RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark32RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark32RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark32RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.322403e-01 ;
    mex-perf:r2 2.077935e-02 .

sml:Benchmark33RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark33RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark33RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark33RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark33RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.271016e-01 ;
    mex-perf:r2 5.675441e-02 .

sml:Benchmark34RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark34RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark34RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark34RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark34RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.206272e-01 ;
    mex-perf:r2 8.503588e-02 .

sml:Benchmark35RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark35RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark35RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark35RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark35RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.18949e-01 ;
    mex-perf:r2 9.208394e-02 .

sml:Benchmark36RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark36RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark36RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark36RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark36RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.149906e-01 ;
    mex-perf:r2 9.742333e-02 .

sml:Benchmark37RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark37RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark37RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark37RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark37RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.001675e-01 ;
    mex-perf:r2 1.960293e-01 .

sml:Benchmark38RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark38RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark38RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark38RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark38RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.650121e-01 ;
    mex-perf:r2 3.860607e-01 .

sml:Benchmark39RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark39RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark39RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark39RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark39RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.432339e-01 ;
    mex-perf:r2 4.729066e-01 .

sml:Benchmark3DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark3DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.516292e-01 ;
    mex-perf:r2 3.688649e-01 .

sml:Benchmark40RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark40RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark40RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark40RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark40RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.346751e-01 ;
    mex-perf:r2 4.934888e-01 .

sml:Benchmark41RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark41RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark41RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark41RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark41RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.337508e-01 ;
    mex-perf:r2 4.853135e-01 .

sml:Benchmark42RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark42RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark42RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark42RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark42RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34125e-01 ;
    mex-perf:r2 -1.112175e-01 .

sml:Benchmark43RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark43RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark43RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark43RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark43RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.32e-01 ;
    mex-perf:r2 -5.357401e-02 .

sml:Benchmark44RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark44RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark44RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark44RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark44RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.3125e-01 ;
    mex-perf:r2 -4.484594e-03 .

sml:Benchmark45RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark45RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark45RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark45RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark45RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.33625e-01 ;
    mex-perf:r2 8.797918e-03 .

sml:Benchmark46RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark46RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark46RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark46RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark46RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.37e-01 ;
    mex-perf:r2 2.80984e-02 .

sml:Benchmark47RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark47RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark47RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark47RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark47RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.322004e-01 ;
    mex-perf:r2 2.486975e-02 .

sml:Benchmark48RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark48RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark48RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark48RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark48RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.261384e-01 ;
    mex-perf:r2 6.281729e-02 .

sml:Benchmark49RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark49RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark49RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark49RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark49RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.220386e-01 ;
    mex-perf:r2 8.369358e-02 .

sml:Benchmark4DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark4DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.875e-01 ;
    mex-perf:balancedAccuracy 5.813953e-01 ;
    mex-perf:meanAbsoluteError 1.300372e-01 ;
    mex-perf:r2 3.607161e-01 .

sml:Benchmark50RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark50RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark50RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark50RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark50RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.187809e-01 ;
    mex-perf:r2 9.955399e-02 .

sml:Benchmark51RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark51RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark51RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark51RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark51RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.145446e-01 ;
    mex-perf:r2 1.062405e-01 .

sml:Benchmark52RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark52RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark52RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark52RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark52RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.9945e-01 ;
    mex-perf:r2 1.95361e-01 .

sml:Benchmark53RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark53RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark53RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark53RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark53RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.646631e-01 ;
    mex-perf:r2 3.830134e-01 .

sml:Benchmark54RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark54RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark54RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark54RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark54RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.437539e-01 ;
    mex-perf:r2 4.688416e-01 .

sml:Benchmark55RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark55RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark55RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark55RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark55RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.346414e-01 ;
    mex-perf:r2 5.012067e-01 .

sml:Benchmark56RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark56RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark56RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark56RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark56RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.339223e-01 ;
    mex-perf:r2 4.905662e-01 .

sml:Benchmark57RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark57RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark57RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark57RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark57RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.341964e-01 ;
    mex-perf:r2 -1.046609e-01 .

sml:Benchmark58RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark58RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark58RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark58RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark58RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.323214e-01 ;
    mex-perf:r2 -4.897719e-02 .

sml:Benchmark59RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark59RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark59RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark59RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark59RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.311607e-01 ;
    mex-perf:r2 1.271334e-04 .

sml:Benchmark5DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark5DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 9.09375e-01 ;
    mex-perf:balancedAccuracy 7.217278e-01 ;
    mex-perf:meanAbsoluteError 1.111322e-01 ;
    mex-perf:r2 3.462433e-01 .

sml:Benchmark60RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark60RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark60RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark60RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark60RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.325893e-01 ;
    mex-perf:r2 2.477799e-02 .

sml:Benchmark61RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark61RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark61RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark61RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark61RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.352679e-01 ;
    mex-perf:r2 4.556892e-02 .

sml:Benchmark62RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark62RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark62RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark62RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark62RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.315561e-01 ;
    mex-perf:r2 2.983035e-02 .

sml:Benchmark63RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark63RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark63RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark63RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark63RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.261193e-01 ;
    mex-perf:r2 6.564147e-02 .

sml:Benchmark64RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark64RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark64RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark64RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark64RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.221599e-01 ;
    mex-perf:r2 8.735299e-02 .

sml:Benchmark65RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark65RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark65RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark65RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark65RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.183391e-01 ;
    mex-perf:r2 1.064188e-01 .

sml:Benchmark66RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark66RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark66RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark66RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark66RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.150139e-01 ;
    mex-perf:r2 1.109256e-01 .

sml:Benchmark67RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark67RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark67RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark67RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark67RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.995049e-01 ;
    mex-perf:r2 1.979486e-01 .

sml:Benchmark68RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark68RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark68RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark68RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark68RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.645221e-01 ;
    mex-perf:r2 3.818026e-01 .

sml:Benchmark69RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark69RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark69RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark69RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark69RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.443979e-01 ;
    mex-perf:r2 4.694049e-01 .

sml:Benchmark6DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark6DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 9.03125e-01 ;
    mex-perf:balancedAccuracy 7.279406e-01 ;
    mex-perf:meanAbsoluteError 1.196426e-01 ;
    mex-perf:r2 1.465694e-01 .

sml:Benchmark70RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark70RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark70RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark70RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark70RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.347006e-01 ;
    mex-perf:r2 5.008932e-01 .

sml:Benchmark71RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark71RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark71RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark71RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark71RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.340619e-01 ;
    mex-perf:r2 4.956873e-01 .

sml:Benchmark72RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark72RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark72RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark72RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark72RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.342361e-01 ;
    mex-perf:r2 -1.098876e-01 .

sml:Benchmark73RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark73RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark73RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark73RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark73RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.324306e-01 ;
    mex-perf:r2 -5.880921e-02 .

sml:Benchmark74RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark74RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark74RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark74RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark74RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.320833e-01 ;
    mex-perf:r2 -1.323665e-02 .

sml:Benchmark75RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark75RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark75RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark75RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark75RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.335417e-01 ;
    mex-perf:r2 1.798089e-02 .

sml:Benchmark76RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark76RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark76RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark76RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark76RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.359722e-01 ;
    mex-perf:r2 3.781524e-02 .

sml:Benchmark77RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark77RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark77RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark77RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark77RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.30928e-01 ;
    mex-perf:r2 3.001263e-02 .

sml:Benchmark78RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark78RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark78RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark78RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark78RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.254837e-01 ;
    mex-perf:r2 6.416956e-02 .

sml:Benchmark79RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark79RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark79RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark79RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark79RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.21668e-01 ;
    mex-perf:r2 8.366957e-02 .

sml:Benchmark7RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark7RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark7RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark7RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark7RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.005752e-01 ;
    mex-perf:r2 1.999682e-01 .

sml:Benchmark80RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark80RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark80RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark80RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark80RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.179421e-01 ;
    mex-perf:r2 1.028956e-01 .

sml:Benchmark81RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark81RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark81RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark81RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark81RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.144298e-01 ;
    mex-perf:r2 1.093607e-01 .

sml:Benchmark82RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark82RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark82RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark82RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark82RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.999256e-01 ;
    mex-perf:r2 1.976707e-01 .

sml:Benchmark83RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark83RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark83RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark83RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark83RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.644493e-01 ;
    mex-perf:r2 3.816336e-01 .

sml:Benchmark84RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark84RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark84RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark84RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark84RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.453511e-01 ;
    mex-perf:r2 4.644642e-01 .

sml:Benchmark85RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark85RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark85RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark85RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark85RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.367858e-01 ;
    mex-perf:r2 4.977782e-01 .

sml:Benchmark86RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark86RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark86RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark86RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark86RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.358467e-01 ;
    mex-perf:r2 4.938479e-01 .

sml:Benchmark87RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark87RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark87RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark87RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark87RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.344886e-01 ;
    mex-perf:r2 -1.141143e-01 .

sml:Benchmark88RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark88RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark88RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark88RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark88RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.326705e-01 ;
    mex-perf:r2 -6.441452e-02 .

sml:Benchmark89RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark89RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark89RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark89RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark89RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.326705e-01 ;
    mex-perf:r2 -2.604732e-02 .

sml:Benchmark8RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark8RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark8RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark8RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark8RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.686264e-01 ;
    mex-perf:r2 3.468952e-01 .

sml:Benchmark90RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark90RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark90RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark90RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark90RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.336364e-01 ;
    mex-perf:r2 7.373003e-03 .

sml:Benchmark91RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark91RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark91RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark91RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark91RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.358523e-01 ;
    mex-perf:r2 3.232056e-02 .

sml:Benchmark92RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark92RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark92RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark92RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark92RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.314039e-01 ;
    mex-perf:r2 2.649714e-02 .

sml:Benchmark93RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark93RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark93RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark93RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark93RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.261251e-01 ;
    mex-perf:r2 5.92257e-02 .

sml:Benchmark94RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark94RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark94RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark94RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark94RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.229522e-01 ;
    mex-perf:r2 7.644078e-02 .

sml:Benchmark95RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark95RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark95RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark95RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark95RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.191971e-01 ;
    mex-perf:r2 9.574992e-02 .

sml:Benchmark96RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark96RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark96RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark96RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark96RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 2.154101e-01 ;
    mex-perf:r2 1.06132e-01 .

sml:Benchmark97DecisionTreeClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark97DecisionTreeClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.34375e-01 ;
    mex-perf:r2 -1.552347e-01 .

sml:Benchmark98DecisionTreeClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark98DecisionTreeClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 9.03125e-01 ;
    mex-perf:balancedAccuracy 6.98472e-01 ;
    mex-perf:meanAbsoluteError 9.6875e-02 ;
    mex-perf:r2 1.671564e-01 .

sml:Benchmark99DecisionTreeClassifierParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark99DecisionTreeClassifierPerfomance a mex-perf:ClassificationMeasure ;
    mex-perf:accuracy 8.90625e-01 ;
    mex-perf:balancedAccuracy 7.207203e-01 ;
    mex-perf:meanAbsoluteError 1.09375e-01 ;
    mex-perf:r2 5.969272e-02 .

sml:Benchmark9RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark9RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark9RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark9RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark9RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 8.65625e-01 ;
    mex-perf:balancedAccuracy 5e-01 ;
    mex-perf:meanAbsoluteError 1.491146e-01 ;
    mex-perf:r2 3.884839e-01 .

