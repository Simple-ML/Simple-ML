model,parameters,meanAbsoluteError,accuracy,balancedAccuracy,r2,source_code,dsl_code
LinearRegression,{},703433756827.169,0.02857142857142857,0.026224982746721873,-4.764782171312735e+21,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import LinearRegression
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = LinearRegression(**{})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.LinearRegression

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = LinearRegression();
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RidgeRegression,{},12.411170141102993,0.03428571428571429,0.029848171152518976,0.41757281316044137,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RidgeRegression
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RidgeRegression(**{})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RidgeRegression

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RidgeRegression();
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 1},14.630776246662695,0.017142857142857144,0.014492753623188406,0.1597670274904156,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 1})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=1);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 3},13.871235468036538,0.04,0.017598343685300208,0.25455633221332197,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 3})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=3);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 5},13.798443003611164,0.022857142857142857,0.00966183574879227,0.23348506051541607,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 5})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=5);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 7},13.943283997132372,0.017142857142857144,0.019461697722567287,0.18067572317046243,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 7})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=7);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 9},15.74890352129246,0.03428571428571429,0.015010351966873704,-0.0328393768150268,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 9})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=9);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",14.269082987472403,0.04,0.016563146997929604,0.18355720358561955,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",13.086954341265155,0.022857142857142857,0.012077294685990336,0.3075322352811236,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",13.007442007092514,0.017142857142857144,0.00966183574879227,0.30799906623419393,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",12.611709794875901,0.03428571428571429,0.03916494133885438,0.34685373930660957,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",13.530538109998416,0.02857142857142857,0.011611456176673569,0.29314800235248395,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",14.125622819843848,0.045714285714285714,0.017943409247757076,0.16247997781015144,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",12.170145951364153,0.045714285714285714,0.017425810904071772,0.338945683785842,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",12.686033106452168,0.03428571428571429,0.015010351966873704,0.3075323892301999,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",12.677867114117742,0.02857142857142857,0.009575569358178054,0.30106168474036443,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",13.044762782798724,0.03428571428571429,0.011611456176673569,0.27503922588203167,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",15.761050379888257,0.022857142857142857,0.014492753623188406,-0.012675770833228128,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",15.882634580302422,0.022857142857142857,0.014492753623188406,-0.02264810955398211,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",15.85119192659224,0.04,0.014492753623188406,-0.024473061766312254,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",15.856059940232038,0.04,0.014492753623188406,-0.025378501889376404,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",15.883078920716478,0.04,0.014492753623188406,-0.02776540217901524,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",14.382392957600032,0.03428571428571429,0.014492753623188406,0.1705648091566282,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",13.265619370854282,0.022857142857142857,0.013285024154589372,0.29716613648730195,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",12.866924826227715,0.04,0.02032436162870945,0.3282542982876564,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",12.663968372541845,0.03428571428571429,0.025879917184265012,0.35393363297734504,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",12.753292612641767,0.022857142857142857,0.012077294685990336,0.36009665852617,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",14.246061402489515,0.045714285714285714,0.017943409247757076,0.15986162160787032,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",12.56294494827108,0.05142857142857143,0.014665286404416838,0.3210729667101776,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",12.589090258057134,0.05142857142857143,0.018512767425810903,0.3067592783124179,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",12.689588310517312,0.03428571428571429,0.027087646652864044,0.3149016956227151,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",12.714940144814676,0.05142857142857143,0.029848171152518976,0.3122178913095548,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",15.742608060311547,0.04,0.014492753623188406,-0.01711623298111631,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",15.83864463691213,0.045714285714285714,0.018115942028985508,-0.02510136287093534,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",15.884874979161234,0.04,0.014492753623188406,-0.0281813648435163,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",15.865434691752936,0.04,0.014492753623188406,-0.03009545855105289,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",15.901629427159381,0.03428571428571429,0.014492753623188406,-0.033276014137218146,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",14.440208203181523,0.045714285714285714,0.033816425120772944,0.16800234352493637,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",13.149647387030036,0.017142857142857144,0.007729468599033816,0.30866767096679837,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",12.551525595425291,0.02857142857142857,0.012215320910973083,0.34859505494905474,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",12.32543465904286,0.05142857142857143,0.01911663216011042,0.37193565399126616,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",12.351489928349766,0.04,0.016304347826086956,0.37493884722972215,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",14.316152737373642,0.03428571428571429,0.012422360248447204,0.15390683909655956,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",12.582683170066796,0.045714285714285714,0.015355417529330572,0.3215265193873139,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",12.559929765112638,0.03428571428571429,0.011732229123533472,0.3205005078130525,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",12.710269145853387,0.03428571428571429,0.01911663216011042,0.3125268324106084,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",12.706045499737083,0.02857142857142857,0.012215320910973085,0.3253355979567063,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",15.74540088897843,0.04,0.014492753623188406,-0.018670430210939726,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",15.85375555761382,0.04,0.014492753623188406,-0.026344574418490696,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",15.887913806696808,0.04,0.014492753623188406,-0.03131178119961886,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",15.81671708445849,0.04,0.014492753623188406,-0.027659460199956687,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",15.803202605058301,0.03428571428571429,0.014492753623188406,-0.02962538978908036,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",14.432347372104882,0.04,0.028985507246376812,0.1688565444551664,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",13.073686440169368,0.022857142857142857,0.00966183574879227,0.31581576250986043,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",12.40565728859016,0.03428571428571429,0.013906142167011734,0.36553317817388253,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",12.087258615176994,0.04,0.018374741200828156,0.389956107898476,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",12.145665085662124,0.04,0.01621808143547274,0.39515817052532143,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",14.269280718667973,0.04,0.014492753623188406,0.15813029744985296,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",12.611295060261426,0.06285714285714286,0.02360248447204969,0.3200390418917546,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",12.573675153991195,0.045714285714285714,0.014285714285714285,0.33023835333588925,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",12.522759151015004,0.04,0.01730503795721187,0.3394769048142309,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",12.538746255707894,0.045714285714285714,0.019461697722567287,0.3429417841993334,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",15.74822434915092,0.04,0.014492753623188406,-0.018281254437126915,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",15.863478488190571,0.04,0.014492753623188406,-0.026732639833307648,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",15.907190782710215,0.045714285714285714,0.018115942028985508,-0.033110879160894946,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",15.868268847531368,0.045714285714285714,0.018115942028985508,-0.03300367243661295,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",15.854027708934524,0.04,0.018115942028985508,-0.03480629650605116,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",14.36874975752191,0.03428571428571429,0.014492753623188406,0.17161259121018657,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",13.058628163110168,0.017142857142857144,0.007246376811594203,0.316318487174574,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",12.495554409137892,0.02857142857142857,0.00810904071773637,0.36145060035586085,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",12.238109254683971,0.05142857142857143,0.024206349206349204,0.3833855268264118,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",12.26103391237296,0.022857142857142857,0.011387163561076604,0.38905916337347535,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",14.269017983318335,0.06285714285714286,0.024154589371980673,0.15719447587786262,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",12.643261075393207,0.06285714285714286,0.024810213940648723,0.3176218595044418,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",12.540396039578606,0.045714285714285714,0.02153209109730849,0.3378152509657405,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",12.518835213755159,0.06285714285714286,0.03300552104899931,0.35016477037003535,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",12.54660177246664,0.03428571428571429,0.011128364389233954,0.35326796032288865,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",15.740035336429978,0.04,0.014492753623188406,-0.018396327085057562,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",15.887071247892985,0.04,0.014492753623188406,-0.028947197371014477,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",15.948813556038715,0.045714285714285714,0.018115942028985508,-0.035736573144507844,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",15.911463454215696,0.045714285714285714,0.018115942028985508,-0.03598216817615563,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",15.89988324503302,0.04,0.018115942028985508,-0.03824041113982579,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",14.385156021936751,0.03428571428571429,0.014492753623188406,0.17111509776442813,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",13.01258364082958,0.017142857142857144,0.007246376811594203,0.3183783034653147,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",12.58627094031245,0.005714285714285714,0.0024154589371980675,0.35747344304337825,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",12.276907976148689,0.03428571428571429,0.01670117322291235,0.3873156195875608,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",12.22373471524583,0.02857142857142857,0.026224982746721876,0.3955332535380923,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",14.307715609503875,0.06285714285714286,0.024154589371980673,0.15566958212879423,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",12.72768639399122,0.045714285714285714,0.012249827467218772,0.31165154156103814,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",12.505326594733924,0.05714285714285714,0.02601794340924776,0.33962551388278994,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",12.489375804826821,0.02857142857142857,0.014630779848171151,0.35425381531436895,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",12.459454177022442,0.05142857142857143,0.01984126984126984,0.3578288031252641,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",15.736611988439243,0.045714285714285714,0.021739130434782608,-0.01736117695526107,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",15.906692482006651,0.04,0.014492753623188406,-0.02925222549689499,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",15.965177241473887,0.045714285714285714,0.018115942028985508,-0.034862753673755575,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",15.955139787167495,0.045714285714285714,0.018115942028985508,-0.03740958830279628,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",15.93084937254186,0.03428571428571429,0.014492753623188406,-0.03897933238848261,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('SpeedAverages')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('average_speed')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""SpeedAverages"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""average_speed"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
