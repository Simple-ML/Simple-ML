model,parameters,meanAbsoluteError,accuracy,balancedAccuracy,r2,source_code
LinearRegression,{},0.5015336084930234,0.453125,0.18082352941176472,0.3584775007341886,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import LinearRegression
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = LinearRegression(**{})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RidgeRegression,{},0.5015850633476925,0.453125,0.18082352941176472,0.35845081976859106,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RidgeRegression
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RidgeRegression(**{})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
DecisionTreeRegressor,{'maxDepth': 1},0.5965508047783471,0.525,0.21202941176470588,0.1410070706760923,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 1})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
DecisionTreeRegressor,{'maxDepth': 3},0.5278150802018895,0.515625,0.20695098039215684,0.31957756726323916,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 3})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
DecisionTreeRegressor,{'maxDepth': 5},0.4898284035964444,0.478125,0.2306447017831523,0.3231316033455707,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 5})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
DecisionTreeRegressor,{'maxDepth': 7},0.4751870086388781,0.50625,0.27117992074878733,0.32478704959742244,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 7})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
DecisionTreeRegressor,{'maxDepth': 9},0.4445178543616432,0.515625,0.26709264193482274,0.2879168191595646,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 9})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.5913274135477448,0.471875,0.18752941176470586,0.1711487553297758,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.5142870752526436,0.521875,0.219218487394958,0.37353020655187874,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.48893424676403574,0.478125,0.20184593837535014,0.39960495322698963,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.46905658027309477,0.484375,0.21792358406777346,0.4066779380549588,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.45993539938278866,0.465625,0.21646543007446883,0.4008782822456868,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.51375,0.525,0.21202941176470588,0.11957772656308074,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.471875,0.5625,0.2486330532212885,0.25946323693405704,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.47156249999999994,0.5625,0.2590966386554622,0.25618020964984023,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.471875,0.546875,0.2530770308123249,0.2606051594676977,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.4781250000000001,0.540625,0.23973109243697477,0.2533729834213072,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.6875554659370047,0.421875,0.16544117647058823,0.007784513360918788,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.6834778834024529,0.43125,0.16944117647058823,0.013456864647053202,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.6810130121654538,0.434375,0.17088235294117649,0.005488431027682372,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.6796437506890426,0.428125,0.1685392156862745,0.010440046947704062,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.665946218453545,0.434375,0.17393758967001435,0.03941576720380002,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.590586119342651,0.478125,0.19084313725490198,0.16718742766566574,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.509884320563278,0.5125,0.23679271708683472,0.38248517080968547,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.4797268582642972,0.50625,0.2236624649859944,0.4255087573916695,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.4497755331815781,0.48125,0.2242142857142857,0.4726461610277771,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.43979834733932266,0.496875,0.2227177017148323,0.46951855970054257,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.5118750000000001,0.525,0.21202941176470588,0.12171354463526052,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.46958333333333335,0.56875,0.24018907563025207,0.26849288363525226,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.46260416666666665,0.553125,0.23352240896358542,0.27692513567764476,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.45583333333333326,0.553125,0.24430952380952378,0.29221949627867405,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.45427083333333335,0.55,0.2533319327731092,0.2962638052519847,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.6863726145672567,0.425,0.16666666666666666,0.007562029931818426,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.6844426322595275,0.428125,0.1681078431372549,0.010425870188854436,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.6858884495822427,0.43125,0.16954901960784316,-0.002638979672910935,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.6790678046307027,0.421875,0.16587254901960785,0.008847542235533967,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.6669058227418392,0.43125,0.16987254901960783,0.0446195800791801,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.5913298983145989,0.471875,0.18752941176470586,0.17484249672870777,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.5099122549269366,0.5125,0.23668487394957982,0.384432136170326,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.4826605032458319,0.509375,0.22478011204481793,0.42946239682828813,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.4524531687977308,0.49375,0.22890056022408964,0.47368325524413046,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.4410770863721395,0.49375,0.21843697478991597,0.4707990063825759,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.5131249999999999,0.49375,0.19707843137254902,0.13677507991970872,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.47074999999999995,0.5375,0.22631652661064425,0.2676926919931605,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.461125,0.534375,0.224875350140056,0.2848786261244518,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.4567500000000001,0.534375,0.24623389355742295,0.2969411344881422,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.4591875000000001,0.528125,0.2434593837535014,0.2931023715708869,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.6871505476314625,0.421875,0.16544117647058823,0.006134066895261081,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.682314204883476,0.428125,0.1681078431372549,0.016633323363477337,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.6837524889764774,0.434375,0.1707745098039216,0.009666032982279638,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.6774205350910387,0.428125,0.16832352941176468,0.01867953102587394,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.6706608203758769,0.43125,0.16987254901960783,0.03668233523597708,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.5903614603576575,0.478125,0.19051960784313726,0.17421450878750422,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.5109838121037393,0.509375,0.23524369747899157,0.380037610586648,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.4813468773457716,0.509375,0.2354593837535014,0.4345098612230959,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.45134818629592727,0.48125,0.22356722689075628,0.47407896565189855,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.4409960491364865,0.490625,0.21710364145658265,0.4776256745743692,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.5129464285714286,0.49375,0.19707843137254902,0.13191748128885028,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.47428571428571437,0.51875,0.21820868347338937,0.2572162907241551,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.4659821428571428,0.521875,0.2194341736694678,0.27401886514772433,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.46035714285714285,0.515625,0.23823389355742297,0.28814724343383924,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.46183035714285714,0.5125,0.23668487394957982,0.2888182200246091,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.6877852143917583,0.421875,0.16544117647058823,0.003449899506812626,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.6824423219632493,0.428125,0.1681078431372549,0.01670873311858445,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.683399640082637,0.434375,0.1707745098039216,0.007509216031287735,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.6770010354508375,0.43125,0.16965686274509803,0.021626417323052927,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.6651132274310758,0.43125,0.16987254901960783,0.055983104790894966,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.5899059358501633,0.478125,0.19051960784313726,0.17314391318359645,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.5103668425513337,0.5,0.2313515406162465,0.3821068388579475,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.4802883738600422,0.503125,0.23279271708683472,0.43699493140700696,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.45149604256714787,0.49375,0.2287927170868347,0.4757478570007083,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.4356359589697002,0.5,0.23167507002801122,0.4918575916569763,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.5130555555555555,0.49375,0.19707843137254902,0.12938510239726997,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.4753125000000001,0.509375,0.21442436974789914,0.2585580401108366,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.4664583333333333,0.521875,0.21932633053221287,0.2772581964166233,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.4600347222222222,0.509375,0.23578291316526612,0.2923563625082719,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.4610763888888889,0.503125,0.23300840336134454,0.29113102793770906,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.6871581807228814,0.425,0.16677450980392158,0.006922924269740616,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.6830647696682371,0.428125,0.1681078431372549,0.014814271575120719,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.683984943064927,0.434375,0.1707745098039216,0.006211905072093793,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.6760597986353382,0.428125,0.1684313725490196,0.026833384853658604,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.6628932106202943,0.43125,0.16987254901960783,0.06397598464088095,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.5902559675769756,0.478125,0.19051960784313726,0.17083461402320865,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.5106448654545332,0.496875,0.23001820728291314,0.38042191329023556,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.4792707596833251,0.503125,0.23279271708683472,0.4376042351333431,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.4509689014506426,0.5,0.2313515406162465,0.47756161333191693,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.433179608728706,0.503125,0.22232913165266108,0.49615789331136106,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.5125,0.49375,0.19707843137254902,0.12545721200488336,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.47428977272727285,0.5125,0.21575770308123246,0.2574872862689246,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.46482954545454547,0.525,0.2312310924369748,0.2794681153694678,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.45991477272727277,0.509375,0.23589075630252102,0.2903505899281813,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.459034090909091,0.509375,0.2355672268907563,0.2929525532219486,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.687217725804181,0.425,0.16677450980392158,0.005416220437599595,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.6838730515339007,0.428125,0.1681078431372549,0.012959500370316568,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.6849437720073647,0.434375,0.1707745098039216,0.0009242617953331145,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.6783467613246646,0.425,0.16709803921568625,0.019439622065828277,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.6648128129184305,0.43125,0.16987254901960783,0.05515895651906033,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('RedWineQuality')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
"
