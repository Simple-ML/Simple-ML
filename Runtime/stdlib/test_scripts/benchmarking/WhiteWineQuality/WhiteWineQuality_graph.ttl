@prefix mex-algo: <http://mex.aksw.org/mex-algo#> .
@prefix mex-perf: <http://mex.aksw.org/mex-perf#> .
@prefix sml: <https://simple-ml.de/resource/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

sml:Benchmark0LinearRegression a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:LinearRegression ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.LinearRegression\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = LinearRegression();\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:perfomance sml:Benchmark0LinearRegressionPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark10RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark10RandomForestRegressorParameter0,
        sml:Benchmark10RandomForestRegressorParameter1,
        sml:Benchmark10RandomForestRegressorParameter2,
        sml:Benchmark10RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark10RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark11RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark11RandomForestRegressorParameter0,
        sml:Benchmark11RandomForestRegressorParameter1,
        sml:Benchmark11RandomForestRegressorParameter2,
        sml:Benchmark11RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark11RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark12RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark12RandomForestRegressorParameter0,
        sml:Benchmark12RandomForestRegressorParameter1,
        sml:Benchmark12RandomForestRegressorParameter2,
        sml:Benchmark12RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark12RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark13RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark13RandomForestRegressorParameter0,
        sml:Benchmark13RandomForestRegressorParameter1,
        sml:Benchmark13RandomForestRegressorParameter2,
        sml:Benchmark13RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark13RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark14RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark14RandomForestRegressorParameter0,
        sml:Benchmark14RandomForestRegressorParameter1,
        sml:Benchmark14RandomForestRegressorParameter2,
        sml:Benchmark14RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark14RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark15RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark15RandomForestRegressorParameter0,
        sml:Benchmark15RandomForestRegressorParameter1,
        sml:Benchmark15RandomForestRegressorParameter2,
        sml:Benchmark15RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark15RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark16RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark16RandomForestRegressorParameter0,
        sml:Benchmark16RandomForestRegressorParameter1,
        sml:Benchmark16RandomForestRegressorParameter2,
        sml:Benchmark16RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark16RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark17RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark17RandomForestRegressorParameter0,
        sml:Benchmark17RandomForestRegressorParameter1,
        sml:Benchmark17RandomForestRegressorParameter2,
        sml:Benchmark17RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark17RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark18RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark18RandomForestRegressorParameter0,
        sml:Benchmark18RandomForestRegressorParameter1,
        sml:Benchmark18RandomForestRegressorParameter2,
        sml:Benchmark18RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark18RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark19RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark19RandomForestRegressorParameter0,
        sml:Benchmark19RandomForestRegressorParameter1,
        sml:Benchmark19RandomForestRegressorParameter2,
        sml:Benchmark19RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark19RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark1RidgeRegression a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RidgeRegression ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RidgeRegression\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RidgeRegression();\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:perfomance sml:Benchmark1RidgeRegressionPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark20RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark20RandomForestRegressorParameter0,
        sml:Benchmark20RandomForestRegressorParameter1,
        sml:Benchmark20RandomForestRegressorParameter2,
        sml:Benchmark20RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark20RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark21RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark21RandomForestRegressorParameter0,
        sml:Benchmark21RandomForestRegressorParameter1,
        sml:Benchmark21RandomForestRegressorParameter2,
        sml:Benchmark21RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark21RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark22RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark22RandomForestRegressorParameter0,
        sml:Benchmark22RandomForestRegressorParameter1,
        sml:Benchmark22RandomForestRegressorParameter2,
        sml:Benchmark22RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark22RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark23RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark23RandomForestRegressorParameter0,
        sml:Benchmark23RandomForestRegressorParameter1,
        sml:Benchmark23RandomForestRegressorParameter2,
        sml:Benchmark23RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark23RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark24RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark24RandomForestRegressorParameter0,
        sml:Benchmark24RandomForestRegressorParameter1,
        sml:Benchmark24RandomForestRegressorParameter2,
        sml:Benchmark24RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark24RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark25RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark25RandomForestRegressorParameter0,
        sml:Benchmark25RandomForestRegressorParameter1,
        sml:Benchmark25RandomForestRegressorParameter2,
        sml:Benchmark25RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark25RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark26RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark26RandomForestRegressorParameter0,
        sml:Benchmark26RandomForestRegressorParameter1,
        sml:Benchmark26RandomForestRegressorParameter2,
        sml:Benchmark26RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark26RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark27RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark27RandomForestRegressorParameter0,
        sml:Benchmark27RandomForestRegressorParameter1,
        sml:Benchmark27RandomForestRegressorParameter2,
        sml:Benchmark27RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark27RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark28RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark28RandomForestRegressorParameter0,
        sml:Benchmark28RandomForestRegressorParameter1,
        sml:Benchmark28RandomForestRegressorParameter2,
        sml:Benchmark28RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark28RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark29RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark29RandomForestRegressorParameter0,
        sml:Benchmark29RandomForestRegressorParameter1,
        sml:Benchmark29RandomForestRegressorParameter2,
        sml:Benchmark29RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark29RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark2DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=1);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark2DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark2DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark30RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark30RandomForestRegressorParameter0,
        sml:Benchmark30RandomForestRegressorParameter1,
        sml:Benchmark30RandomForestRegressorParameter2,
        sml:Benchmark30RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark30RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark31RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark31RandomForestRegressorParameter0,
        sml:Benchmark31RandomForestRegressorParameter1,
        sml:Benchmark31RandomForestRegressorParameter2,
        sml:Benchmark31RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark31RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark32RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark32RandomForestRegressorParameter0,
        sml:Benchmark32RandomForestRegressorParameter1,
        sml:Benchmark32RandomForestRegressorParameter2,
        sml:Benchmark32RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark32RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark33RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark33RandomForestRegressorParameter0,
        sml:Benchmark33RandomForestRegressorParameter1,
        sml:Benchmark33RandomForestRegressorParameter2,
        sml:Benchmark33RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark33RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark34RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark34RandomForestRegressorParameter0,
        sml:Benchmark34RandomForestRegressorParameter1,
        sml:Benchmark34RandomForestRegressorParameter2,
        sml:Benchmark34RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark34RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark35RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark35RandomForestRegressorParameter0,
        sml:Benchmark35RandomForestRegressorParameter1,
        sml:Benchmark35RandomForestRegressorParameter2,
        sml:Benchmark35RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark35RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark36RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=15, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark36RandomForestRegressorParameter0,
        sml:Benchmark36RandomForestRegressorParameter1,
        sml:Benchmark36RandomForestRegressorParameter2,
        sml:Benchmark36RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark36RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark37RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark37RandomForestRegressorParameter0,
        sml:Benchmark37RandomForestRegressorParameter1,
        sml:Benchmark37RandomForestRegressorParameter2,
        sml:Benchmark37RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark37RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark38RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark38RandomForestRegressorParameter0,
        sml:Benchmark38RandomForestRegressorParameter1,
        sml:Benchmark38RandomForestRegressorParameter2,
        sml:Benchmark38RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark38RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark39RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark39RandomForestRegressorParameter0,
        sml:Benchmark39RandomForestRegressorParameter1,
        sml:Benchmark39RandomForestRegressorParameter2,
        sml:Benchmark39RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark39RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark3DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=3);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark3DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark3DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark40RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark40RandomForestRegressorParameter0,
        sml:Benchmark40RandomForestRegressorParameter1,
        sml:Benchmark40RandomForestRegressorParameter2,
        sml:Benchmark40RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark40RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark41RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark41RandomForestRegressorParameter0,
        sml:Benchmark41RandomForestRegressorParameter1,
        sml:Benchmark41RandomForestRegressorParameter2,
        sml:Benchmark41RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark41RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark42RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark42RandomForestRegressorParameter0,
        sml:Benchmark42RandomForestRegressorParameter1,
        sml:Benchmark42RandomForestRegressorParameter2,
        sml:Benchmark42RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark42RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark43RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark43RandomForestRegressorParameter0,
        sml:Benchmark43RandomForestRegressorParameter1,
        sml:Benchmark43RandomForestRegressorParameter2,
        sml:Benchmark43RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark43RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark44RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark44RandomForestRegressorParameter0,
        sml:Benchmark44RandomForestRegressorParameter1,
        sml:Benchmark44RandomForestRegressorParameter2,
        sml:Benchmark44RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark44RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark45RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark45RandomForestRegressorParameter0,
        sml:Benchmark45RandomForestRegressorParameter1,
        sml:Benchmark45RandomForestRegressorParameter2,
        sml:Benchmark45RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark45RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark46RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark46RandomForestRegressorParameter0,
        sml:Benchmark46RandomForestRegressorParameter1,
        sml:Benchmark46RandomForestRegressorParameter2,
        sml:Benchmark46RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark46RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark47RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark47RandomForestRegressorParameter0,
        sml:Benchmark47RandomForestRegressorParameter1,
        sml:Benchmark47RandomForestRegressorParameter2,
        sml:Benchmark47RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark47RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark48RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark48RandomForestRegressorParameter0,
        sml:Benchmark48RandomForestRegressorParameter1,
        sml:Benchmark48RandomForestRegressorParameter2,
        sml:Benchmark48RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark48RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark49RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark49RandomForestRegressorParameter0,
        sml:Benchmark49RandomForestRegressorParameter1,
        sml:Benchmark49RandomForestRegressorParameter2,
        sml:Benchmark49RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark49RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark4DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=5);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark4DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark4DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark50RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark50RandomForestRegressorParameter0,
        sml:Benchmark50RandomForestRegressorParameter1,
        sml:Benchmark50RandomForestRegressorParameter2,
        sml:Benchmark50RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark50RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark51RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=25, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark51RandomForestRegressorParameter0,
        sml:Benchmark51RandomForestRegressorParameter1,
        sml:Benchmark51RandomForestRegressorParameter2,
        sml:Benchmark51RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark51RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark52RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark52RandomForestRegressorParameter0,
        sml:Benchmark52RandomForestRegressorParameter1,
        sml:Benchmark52RandomForestRegressorParameter2,
        sml:Benchmark52RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark52RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark53RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark53RandomForestRegressorParameter0,
        sml:Benchmark53RandomForestRegressorParameter1,
        sml:Benchmark53RandomForestRegressorParameter2,
        sml:Benchmark53RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark53RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark54RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark54RandomForestRegressorParameter0,
        sml:Benchmark54RandomForestRegressorParameter1,
        sml:Benchmark54RandomForestRegressorParameter2,
        sml:Benchmark54RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark54RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark55RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark55RandomForestRegressorParameter0,
        sml:Benchmark55RandomForestRegressorParameter1,
        sml:Benchmark55RandomForestRegressorParameter2,
        sml:Benchmark55RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark55RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark56RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark56RandomForestRegressorParameter0,
        sml:Benchmark56RandomForestRegressorParameter1,
        sml:Benchmark56RandomForestRegressorParameter2,
        sml:Benchmark56RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark56RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark57RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark57RandomForestRegressorParameter0,
        sml:Benchmark57RandomForestRegressorParameter1,
        sml:Benchmark57RandomForestRegressorParameter2,
        sml:Benchmark57RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark57RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark58RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark58RandomForestRegressorParameter0,
        sml:Benchmark58RandomForestRegressorParameter1,
        sml:Benchmark58RandomForestRegressorParameter2,
        sml:Benchmark58RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark58RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark59RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark59RandomForestRegressorParameter0,
        sml:Benchmark59RandomForestRegressorParameter1,
        sml:Benchmark59RandomForestRegressorParameter2,
        sml:Benchmark59RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark59RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark5DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=7);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark5DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark5DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark60RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark60RandomForestRegressorParameter0,
        sml:Benchmark60RandomForestRegressorParameter1,
        sml:Benchmark60RandomForestRegressorParameter2,
        sml:Benchmark60RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark60RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark61RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark61RandomForestRegressorParameter0,
        sml:Benchmark61RandomForestRegressorParameter1,
        sml:Benchmark61RandomForestRegressorParameter2,
        sml:Benchmark61RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark61RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark62RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark62RandomForestRegressorParameter0,
        sml:Benchmark62RandomForestRegressorParameter1,
        sml:Benchmark62RandomForestRegressorParameter2,
        sml:Benchmark62RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark62RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark63RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark63RandomForestRegressorParameter0,
        sml:Benchmark63RandomForestRegressorParameter1,
        sml:Benchmark63RandomForestRegressorParameter2,
        sml:Benchmark63RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark63RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark64RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark64RandomForestRegressorParameter0,
        sml:Benchmark64RandomForestRegressorParameter1,
        sml:Benchmark64RandomForestRegressorParameter2,
        sml:Benchmark64RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark64RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark65RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark65RandomForestRegressorParameter0,
        sml:Benchmark65RandomForestRegressorParameter1,
        sml:Benchmark65RandomForestRegressorParameter2,
        sml:Benchmark65RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark65RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark66RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=35, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark66RandomForestRegressorParameter0,
        sml:Benchmark66RandomForestRegressorParameter1,
        sml:Benchmark66RandomForestRegressorParameter2,
        sml:Benchmark66RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark66RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark67RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark67RandomForestRegressorParameter0,
        sml:Benchmark67RandomForestRegressorParameter1,
        sml:Benchmark67RandomForestRegressorParameter2,
        sml:Benchmark67RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark67RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark68RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark68RandomForestRegressorParameter0,
        sml:Benchmark68RandomForestRegressorParameter1,
        sml:Benchmark68RandomForestRegressorParameter2,
        sml:Benchmark68RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark68RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark69RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark69RandomForestRegressorParameter0,
        sml:Benchmark69RandomForestRegressorParameter1,
        sml:Benchmark69RandomForestRegressorParameter2,
        sml:Benchmark69RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark69RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark6DecisionTreeRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:DecisionTreeRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.DecisionTreeRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = DecisionTreeRegressor(maxDepth=9);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark6DecisionTreeRegressorParameter0 ;
    sml:perfomance sml:Benchmark6DecisionTreeRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark70RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark70RandomForestRegressorParameter0,
        sml:Benchmark70RandomForestRegressorParameter1,
        sml:Benchmark70RandomForestRegressorParameter2,
        sml:Benchmark70RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark70RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark71RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark71RandomForestRegressorParameter0,
        sml:Benchmark71RandomForestRegressorParameter1,
        sml:Benchmark71RandomForestRegressorParameter2,
        sml:Benchmark71RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark71RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark72RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark72RandomForestRegressorParameter0,
        sml:Benchmark72RandomForestRegressorParameter1,
        sml:Benchmark72RandomForestRegressorParameter2,
        sml:Benchmark72RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark72RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark73RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark73RandomForestRegressorParameter0,
        sml:Benchmark73RandomForestRegressorParameter1,
        sml:Benchmark73RandomForestRegressorParameter2,
        sml:Benchmark73RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark73RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark74RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark74RandomForestRegressorParameter0,
        sml:Benchmark74RandomForestRegressorParameter1,
        sml:Benchmark74RandomForestRegressorParameter2,
        sml:Benchmark74RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark74RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark75RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark75RandomForestRegressorParameter0,
        sml:Benchmark75RandomForestRegressorParameter1,
        sml:Benchmark75RandomForestRegressorParameter2,
        sml:Benchmark75RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark75RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark76RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark76RandomForestRegressorParameter0,
        sml:Benchmark76RandomForestRegressorParameter1,
        sml:Benchmark76RandomForestRegressorParameter2,
        sml:Benchmark76RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark76RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark77RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark77RandomForestRegressorParameter0,
        sml:Benchmark77RandomForestRegressorParameter1,
        sml:Benchmark77RandomForestRegressorParameter2,
        sml:Benchmark77RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark77RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark78RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark78RandomForestRegressorParameter0,
        sml:Benchmark78RandomForestRegressorParameter1,
        sml:Benchmark78RandomForestRegressorParameter2,
        sml:Benchmark78RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark78RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark79RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark79RandomForestRegressorParameter0,
        sml:Benchmark79RandomForestRegressorParameter1,
        sml:Benchmark79RandomForestRegressorParameter2,
        sml:Benchmark79RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark79RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark7RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark7RandomForestRegressorParameter0,
        sml:Benchmark7RandomForestRegressorParameter1,
        sml:Benchmark7RandomForestRegressorParameter2,
        sml:Benchmark7RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark7RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark80RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark80RandomForestRegressorParameter0,
        sml:Benchmark80RandomForestRegressorParameter1,
        sml:Benchmark80RandomForestRegressorParameter2,
        sml:Benchmark80RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark80RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark81RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=45, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark81RandomForestRegressorParameter0,
        sml:Benchmark81RandomForestRegressorParameter1,
        sml:Benchmark81RandomForestRegressorParameter2,
        sml:Benchmark81RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark81RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark82RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark82RandomForestRegressorParameter0,
        sml:Benchmark82RandomForestRegressorParameter1,
        sml:Benchmark82RandomForestRegressorParameter2,
        sml:Benchmark82RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark82RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark83RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark83RandomForestRegressorParameter0,
        sml:Benchmark83RandomForestRegressorParameter1,
        sml:Benchmark83RandomForestRegressorParameter2,
        sml:Benchmark83RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark83RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark84RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark84RandomForestRegressorParameter0,
        sml:Benchmark84RandomForestRegressorParameter1,
        sml:Benchmark84RandomForestRegressorParameter2,
        sml:Benchmark84RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark84RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark85RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark85RandomForestRegressorParameter0,
        sml:Benchmark85RandomForestRegressorParameter1,
        sml:Benchmark85RandomForestRegressorParameter2,
        sml:Benchmark85RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark85RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark86RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="squared_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark86RandomForestRegressorParameter0,
        sml:Benchmark86RandomForestRegressorParameter1,
        sml:Benchmark86RandomForestRegressorParameter2,
        sml:Benchmark86RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark86RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark87RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark87RandomForestRegressorParameter0,
        sml:Benchmark87RandomForestRegressorParameter1,
        sml:Benchmark87RandomForestRegressorParameter2,
        sml:Benchmark87RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark87RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark88RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark88RandomForestRegressorParameter0,
        sml:Benchmark88RandomForestRegressorParameter1,
        sml:Benchmark88RandomForestRegressorParameter2,
        sml:Benchmark88RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark88RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark89RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark89RandomForestRegressorParameter0,
        sml:Benchmark89RandomForestRegressorParameter1,
        sml:Benchmark89RandomForestRegressorParameter2,
        sml:Benchmark89RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark89RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark8RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark8RandomForestRegressorParameter0,
        sml:Benchmark8RandomForestRegressorParameter1,
        sml:Benchmark8RandomForestRegressorParameter2,
        sml:Benchmark8RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark8RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark90RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark90RandomForestRegressorParameter0,
        sml:Benchmark90RandomForestRegressorParameter1,
        sml:Benchmark90RandomForestRegressorParameter2,
        sml:Benchmark90RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark90RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark91RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="absolute_error", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark91RandomForestRegressorParameter0,
        sml:Benchmark91RandomForestRegressorParameter1,
        sml:Benchmark91RandomForestRegressorParameter2,
        sml:Benchmark91RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark91RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark92RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=1, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark92RandomForestRegressorParameter0,
        sml:Benchmark92RandomForestRegressorParameter1,
        sml:Benchmark92RandomForestRegressorParameter2,
        sml:Benchmark92RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark92RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark93RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=3, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark93RandomForestRegressorParameter0,
        sml:Benchmark93RandomForestRegressorParameter1,
        sml:Benchmark93RandomForestRegressorParameter2,
        sml:Benchmark93RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark93RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark94RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark94RandomForestRegressorParameter0,
        sml:Benchmark94RandomForestRegressorParameter1,
        sml:Benchmark94RandomForestRegressorParameter2,
        sml:Benchmark94RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark94RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark95RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=7, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark95RandomForestRegressorParameter0,
        sml:Benchmark95RandomForestRegressorParameter1,
        sml:Benchmark95RandomForestRegressorParameter2,
        sml:Benchmark95RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark95RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark96RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=55, criterion="poisson", maxDepth=9, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark96RandomForestRegressorParameter0,
        sml:Benchmark96RandomForestRegressorParameter1,
        sml:Benchmark96RandomForestRegressorParameter2,
        sml:Benchmark96RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark96RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark9RandomForestRegressor a sml:Benchmark ;
    mex-algo:hasAlgorithmClass mex-algo:RandomForestRegressor ;
    sml:dslCode """package example\r
\r
import simpleml.metrics.meanAbsoluteError\r
import simpleml.metrics.accuracy\r
import simpleml.metrics.balancedAccuracy\r
import simpleml.metrics.r2\r
\r
import simpleml.dataset.loadDataset\r
import simpleml.dataset.StandardScaler\r
import simpleml.model.supervised.regression.RandomForestRegressor\r
\r
workflow exampleWorkflow {\r
    val dataset1 = loadDataset("WhiteWineQuality");\r
    val dataset2 = dataset1.dropAllMissingValues();\r
    val dataset3 = dataset2.transformDatatypes();\r
    val dataset4 = dataset3.setTargetAttribute("quality");\r
    val dataset5 = StandardScaler().scale(dataset4);\r
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);\r
    \r
    val model = RandomForestRegressor(nEstimator=5, criterion="squared_error", maxDepth=5, randomState=2022);\r
    val lr = model.fit(X_train, y_train);\r
    val y_pred = lr.predict(X_test);\r
    \r
}""" ;
    sml:hasParameter sml:Benchmark9RandomForestRegressorParameter0,
        sml:Benchmark9RandomForestRegressorParameter1,
        sml:Benchmark9RandomForestRegressorParameter2,
        sml:Benchmark9RandomForestRegressorParameter3 ;
    sml:perfomance sml:Benchmark9RandomForestRegressorPerfomance ;
    sml:targetDataSet sml:WhiteWineQuality .

sml:Benchmark0LinearRegressionPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.55102e-01 ;
    mex-perf:balancedAccuracy 2.50451e-01 ;
    mex-perf:meanAbsoluteError 5.721671e-01 ;
    mex-perf:r2 2.905284e-01 .

sml:Benchmark10RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark10RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark10RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark10RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark10RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.612245e-01 ;
    mex-perf:balancedAccuracy 2.643423e-01 ;
    mex-perf:meanAbsoluteError 5.339073e-01 ;
    mex-perf:r2 3.821568e-01 .

sml:Benchmark11RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark11RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark11RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark11RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark11RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.877551e-01 ;
    mex-perf:balancedAccuracy 2.761684e-01 ;
    mex-perf:meanAbsoluteError 5.119257e-01 ;
    mex-perf:r2 4.030462e-01 .

sml:Benchmark12RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark12RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark12RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark12RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark12RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.765306e-01 ;
    mex-perf:balancedAccuracy 2.095929e-01 ;
    mex-perf:meanAbsoluteError 5.869388e-01 ;
    mex-perf:r2 2.631479e-02 .

sml:Benchmark13RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark13RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark13RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark13RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark13RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.204082e-01 ;
    mex-perf:balancedAccuracy 2.415583e-01 ;
    mex-perf:meanAbsoluteError 5.279592e-01 ;
    mex-perf:r2 1.97813e-01 .

sml:Benchmark14RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark14RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark14RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark14RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark14RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.122449e-01 ;
    mex-perf:balancedAccuracy 2.354928e-01 ;
    mex-perf:meanAbsoluteError 5.247959e-01 ;
    mex-perf:r2 2.105526e-01 .

sml:Benchmark15RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark15RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark15RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark15RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark15RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.306122e-01 ;
    mex-perf:balancedAccuracy 2.557278e-01 ;
    mex-perf:meanAbsoluteError 5.122449e-01 ;
    mex-perf:r2 2.322932e-01 .

sml:Benchmark16RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark16RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark16RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark16RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark16RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.234694e-01 ;
    mex-perf:balancedAccuracy 2.565693e-01 ;
    mex-perf:meanAbsoluteError 5.15102e-01 ;
    mex-perf:r2 2.387265e-01 .

sml:Benchmark17RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark17RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark17RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark17RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark17RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.94898e-01 ;
    mex-perf:balancedAccuracy 1.674174e-01 ;
    mex-perf:meanAbsoluteError 6.548166e-01 ;
    mex-perf:r2 -1.077638e-04 .

sml:Benchmark18RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark18RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark18RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark18RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark18RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3e-01 ;
    mex-perf:balancedAccuracy 1.692943e-01 ;
    mex-perf:meanAbsoluteError 6.560544e-01 ;
    mex-perf:r2 -3.145584e-03 .

sml:Benchmark19RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark19RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark19RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark19RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark19RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3e-01 ;
    mex-perf:balancedAccuracy 1.692943e-01 ;
    mex-perf:meanAbsoluteError 6.574014e-01 ;
    mex-perf:r2 -9.162148e-03 .

sml:Benchmark1RidgeRegressionPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.55102e-01 ;
    mex-perf:balancedAccuracy 2.50451e-01 ;
    mex-perf:meanAbsoluteError 5.721856e-01 ;
    mex-perf:r2 2.904621e-01 .

sml:Benchmark20RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark20RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark20RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark20RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark20RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.989796e-01 ;
    mex-perf:balancedAccuracy 1.687136e-01 ;
    mex-perf:meanAbsoluteError 6.585058e-01 ;
    mex-perf:r2 -1.116131e-02 .

sml:Benchmark21RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark21RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark21RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark21RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark21RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3.132653e-01 ;
    mex-perf:balancedAccuracy 1.7448e-01 ;
    mex-perf:meanAbsoluteError 6.552701e-01 ;
    mex-perf:r2 5.646032e-03 .

sml:Benchmark22RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark22RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark22RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark22RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark22RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.357143e-01 ;
    mex-perf:balancedAccuracy 2.110054e-01 ;
    mex-perf:meanAbsoluteError 6.536013e-01 ;
    mex-perf:r2 1.674254e-01 .

sml:Benchmark23RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark23RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark23RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark23RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark23RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.44898e-01 ;
    mex-perf:balancedAccuracy 2.145892e-01 ;
    mex-perf:meanAbsoluteError 5.764877e-01 ;
    mex-perf:r2 2.985889e-01 .

sml:Benchmark24RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark24RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark24RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark24RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark24RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.581633e-01 ;
    mex-perf:balancedAccuracy 2.431187e-01 ;
    mex-perf:meanAbsoluteError 5.486136e-01 ;
    mex-perf:r2 3.648904e-01 .

sml:Benchmark25RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark25RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark25RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark25RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark25RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.642857e-01 ;
    mex-perf:balancedAccuracy 2.555726e-01 ;
    mex-perf:meanAbsoluteError 5.254234e-01 ;
    mex-perf:r2 4.049979e-01 .

sml:Benchmark26RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark26RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark26RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark26RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark26RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.72449e-01 ;
    mex-perf:balancedAccuracy 2.742954e-01 ;
    mex-perf:meanAbsoluteError 4.962443e-01 ;
    mex-perf:r2 4.464989e-01 .

sml:Benchmark27RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark27RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark27RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark27RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark27RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.653061e-01 ;
    mex-perf:balancedAccuracy 2.093653e-01 ;
    mex-perf:meanAbsoluteError 5.87551e-01 ;
    mex-perf:r2 6.726593e-02 .

sml:Benchmark28RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark28RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark28RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark28RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark28RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.05102e-01 ;
    mex-perf:balancedAccuracy 2.292128e-01 ;
    mex-perf:meanAbsoluteError 5.295918e-01 ;
    mex-perf:r2 2.311457e-01 .

sml:Benchmark29RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark29RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark29RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark29RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark29RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5e-01 ;
    mex-perf:balancedAccuracy 2.430513e-01 ;
    mex-perf:meanAbsoluteError 5.208503e-01 ;
    mex-perf:r2 2.464279e-01 .

sml:Benchmark2DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark2DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.357143e-01 ;
    mex-perf:balancedAccuracy 2.110054e-01 ;
    mex-perf:meanAbsoluteError 6.581773e-01 ;
    mex-perf:r2 1.626199e-01 .

sml:Benchmark30RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark30RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark30RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark30RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark30RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.122449e-01 ;
    mex-perf:balancedAccuracy 2.517414e-01 ;
    mex-perf:meanAbsoluteError 5.118027e-01 ;
    mex-perf:r2 2.638561e-01 .

sml:Benchmark31RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark31RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark31RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark31RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark31RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.030612e-01 ;
    mex-perf:balancedAccuracy 2.53667e-01 ;
    mex-perf:meanAbsoluteError 5.118707e-01 ;
    mex-perf:r2 2.699446e-01 .

sml:Benchmark32RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark32RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark32RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark32RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark32RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.94898e-01 ;
    mex-perf:balancedAccuracy 1.674174e-01 ;
    mex-perf:meanAbsoluteError 6.535816e-01 ;
    mex-perf:r2 -1.667456e-04 .

sml:Benchmark33RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark33RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark33RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark33RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark33RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3e-01 ;
    mex-perf:balancedAccuracy 1.692943e-01 ;
    mex-perf:meanAbsoluteError 6.550428e-01 ;
    mex-perf:r2 -2.619572e-03 .

sml:Benchmark34RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark34RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark34RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark34RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark34RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3e-01 ;
    mex-perf:balancedAccuracy 1.692943e-01 ;
    mex-perf:meanAbsoluteError 6.558801e-01 ;
    mex-perf:r2 -4.323333e-03 .

sml:Benchmark35RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark35RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark35RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark35RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark35RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.979592e-01 ;
    mex-perf:balancedAccuracy 1.681329e-01 ;
    mex-perf:meanAbsoluteError 6.571206e-01 ;
    mex-perf:r2 -8.105921e-03 .

sml:Benchmark36RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 15 .

sml:Benchmark36RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark36RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark36RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark36RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3.020408e-01 ;
    mex-perf:balancedAccuracy 1.701455e-01 ;
    mex-perf:meanAbsoluteError 6.553973e-01 ;
    mex-perf:r2 1.318418e-03 .

sml:Benchmark37RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark37RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark37RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark37RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark37RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.357143e-01 ;
    mex-perf:balancedAccuracy 2.110054e-01 ;
    mex-perf:meanAbsoluteError 6.549921e-01 ;
    mex-perf:r2 1.669746e-01 .

sml:Benchmark38RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark38RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark38RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark38RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark38RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.581633e-01 ;
    mex-perf:balancedAccuracy 2.178263e-01 ;
    mex-perf:meanAbsoluteError 5.778235e-01 ;
    mex-perf:r2 3.026022e-01 .

sml:Benchmark39RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark39RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark39RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark39RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark39RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.561224e-01 ;
    mex-perf:balancedAccuracy 2.417519e-01 ;
    mex-perf:meanAbsoluteError 5.483998e-01 ;
    mex-perf:r2 3.66843e-01 .

sml:Benchmark3DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark3DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.285714e-01 ;
    mex-perf:balancedAccuracy 2.089938e-01 ;
    mex-perf:meanAbsoluteError 5.795786e-01 ;
    mex-perf:r2 2.742624e-01 .

sml:Benchmark40RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark40RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark40RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark40RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark40RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.602041e-01 ;
    mex-perf:balancedAccuracy 2.592746e-01 ;
    mex-perf:meanAbsoluteError 5.251319e-01 ;
    mex-perf:r2 4.085234e-01 .

sml:Benchmark41RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark41RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark41RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark41RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark41RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.704082e-01 ;
    mex-perf:balancedAccuracy 2.739553e-01 ;
    mex-perf:meanAbsoluteError 4.963596e-01 ;
    mex-perf:r2 4.502055e-01 .

sml:Benchmark42RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark42RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark42RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark42RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark42RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.653061e-01 ;
    mex-perf:balancedAccuracy 2.093653e-01 ;
    mex-perf:meanAbsoluteError 5.867755e-01 ;
    mex-perf:r2 5.175453e-02 .

sml:Benchmark43RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark43RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark43RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark43RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark43RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.061224e-01 ;
    mex-perf:balancedAccuracy 2.299989e-01 ;
    mex-perf:meanAbsoluteError 5.287755e-01 ;
    mex-perf:r2 2.208058e-01 .

sml:Benchmark44RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark44RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark44RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark44RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark44RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5e-01 ;
    mex-perf:balancedAccuracy 2.385643e-01 ;
    mex-perf:meanAbsoluteError 5.189388e-01 ;
    mex-perf:r2 2.455413e-01 .

sml:Benchmark45RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark45RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark45RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark45RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark45RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.040816e-01 ;
    mex-perf:balancedAccuracy 2.533303e-01 ;
    mex-perf:meanAbsoluteError 5.11898e-01 ;
    mex-perf:r2 2.61607e-01 .

sml:Benchmark46RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark46RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark46RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark46RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark46RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5e-01 ;
    mex-perf:balancedAccuracy 2.532618e-01 ;
    mex-perf:meanAbsoluteError 5.106122e-01 ;
    mex-perf:r2 2.709866e-01 .

sml:Benchmark47RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark47RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark47RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark47RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark47RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.94898e-01 ;
    mex-perf:balancedAccuracy 1.674174e-01 ;
    mex-perf:meanAbsoluteError 6.52412e-01 ;
    mex-perf:r2 -2.950241e-04 .

sml:Benchmark48RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark48RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark48RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark48RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark48RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.989796e-01 ;
    mex-perf:balancedAccuracy 1.689189e-01 ;
    mex-perf:meanAbsoluteError 6.537275e-01 ;
    mex-perf:r2 -4.053369e-03 .

sml:Benchmark49RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark49RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark49RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark49RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark49RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.979592e-01 ;
    mex-perf:balancedAccuracy 1.683382e-01 ;
    mex-perf:meanAbsoluteError 6.546625e-01 ;
    mex-perf:r2 -7.624528e-03 .

sml:Benchmark4DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark4DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.55102e-01 ;
    mex-perf:balancedAccuracy 2.340409e-01 ;
    mex-perf:meanAbsoluteError 5.761197e-01 ;
    mex-perf:r2 2.978559e-01 .

sml:Benchmark50RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark50RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark50RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark50RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark50RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.979592e-01 ;
    mex-perf:balancedAccuracy 1.683382e-01 ;
    mex-perf:meanAbsoluteError 6.544244e-01 ;
    mex-perf:r2 -5.920267e-03 .

sml:Benchmark51RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 25 .

sml:Benchmark51RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark51RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark51RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark51RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3.122449e-01 ;
    mex-perf:balancedAccuracy 1.738993e-01 ;
    mex-perf:meanAbsoluteError 6.528084e-01 ;
    mex-perf:r2 5.090131e-03 .

sml:Benchmark52RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark52RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark52RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark52RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark52RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.357143e-01 ;
    mex-perf:balancedAccuracy 2.110054e-01 ;
    mex-perf:meanAbsoluteError 6.54478e-01 ;
    mex-perf:r2 1.678225e-01 .

sml:Benchmark53RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark53RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark53RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark53RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark53RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.530612e-01 ;
    mex-perf:balancedAccuracy 2.167708e-01 ;
    mex-perf:meanAbsoluteError 5.772447e-01 ;
    mex-perf:r2 3.030664e-01 .

sml:Benchmark54RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark54RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark54RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark54RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark54RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.561224e-01 ;
    mex-perf:balancedAccuracy 2.413413e-01 ;
    mex-perf:meanAbsoluteError 5.479263e-01 ;
    mex-perf:r2 3.686634e-01 .

sml:Benchmark55RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark55RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark55RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark55RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark55RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.642857e-01 ;
    mex-perf:balancedAccuracy 2.591378e-01 ;
    mex-perf:meanAbsoluteError 5.252216e-01 ;
    mex-perf:r2 4.086915e-01 .

sml:Benchmark56RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark56RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark56RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark56RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark56RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.714286e-01 ;
    mex-perf:balancedAccuracy 2.738151e-01 ;
    mex-perf:meanAbsoluteError 4.978273e-01 ;
    mex-perf:r2 4.510418e-01 .

sml:Benchmark57RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark57RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark57RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark57RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark57RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.653061e-01 ;
    mex-perf:balancedAccuracy 2.093653e-01 ;
    mex-perf:meanAbsoluteError 5.860641e-01 ;
    mex-perf:r2 4.32998e-02 .

sml:Benchmark58RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark58RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark58RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark58RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark58RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.05102e-01 ;
    mex-perf:balancedAccuracy 2.298289e-01 ;
    mex-perf:meanAbsoluteError 5.275219e-01 ;
    mex-perf:r2 2.155592e-01 .

sml:Benchmark59RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark59RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark59RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark59RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark59RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5e-01 ;
    mex-perf:balancedAccuracy 2.38359e-01 ;
    mex-perf:meanAbsoluteError 5.186006e-01 ;
    mex-perf:r2 2.374838e-01 .

sml:Benchmark5DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark5DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.653061e-01 ;
    mex-perf:balancedAccuracy 2.662582e-01 ;
    mex-perf:meanAbsoluteError 5.673637e-01 ;
    mex-perf:r2 3.013219e-01 .

sml:Benchmark60RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark60RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark60RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark60RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark60RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.010204e-01 ;
    mex-perf:balancedAccuracy 2.48023e-01 ;
    mex-perf:meanAbsoluteError 5.121429e-01 ;
    mex-perf:r2 2.54844e-01 .

sml:Benchmark61RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark61RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark61RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark61RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark61RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.010204e-01 ;
    mex-perf:balancedAccuracy 2.491502e-01 ;
    mex-perf:meanAbsoluteError 5.106122e-01 ;
    mex-perf:r2 2.649693e-01 .

sml:Benchmark62RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark62RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark62RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark62RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark62RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.94898e-01 ;
    mex-perf:balancedAccuracy 1.674174e-01 ;
    mex-perf:meanAbsoluteError 6.520257e-01 ;
    mex-perf:r2 -5.550877e-04 .

sml:Benchmark63RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark63RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark63RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark63RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark63RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.979592e-01 ;
    mex-perf:balancedAccuracy 1.685435e-01 ;
    mex-perf:meanAbsoluteError 6.533116e-01 ;
    mex-perf:r2 -5.376099e-03 .

sml:Benchmark64RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark64RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark64RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark64RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark64RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.969388e-01 ;
    mex-perf:balancedAccuracy 1.679628e-01 ;
    mex-perf:meanAbsoluteError 6.540364e-01 ;
    mex-perf:r2 -8.281838e-03 .

sml:Benchmark65RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark65RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark65RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark65RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark65RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.989796e-01 ;
    mex-perf:balancedAccuracy 1.687136e-01 ;
    mex-perf:meanAbsoluteError 6.538398e-01 ;
    mex-perf:r2 -6.768733e-03 .

sml:Benchmark66RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 35 .

sml:Benchmark66RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark66RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark66RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark66RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3.040816e-01 ;
    mex-perf:balancedAccuracy 1.703851e-01 ;
    mex-perf:meanAbsoluteError 6.515028e-01 ;
    mex-perf:r2 5.305933e-03 .

sml:Benchmark67RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark67RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark67RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark67RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark67RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.357143e-01 ;
    mex-perf:balancedAccuracy 2.110054e-01 ;
    mex-perf:meanAbsoluteError 6.541291e-01 ;
    mex-perf:r2 1.68211e-01 .

sml:Benchmark68RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark68RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark68RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark68RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark68RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.530612e-01 ;
    mex-perf:balancedAccuracy 2.163601e-01 ;
    mex-perf:meanAbsoluteError 5.762901e-01 ;
    mex-perf:r2 3.03451e-01 .

sml:Benchmark69RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark69RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark69RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark69RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark69RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.632653e-01 ;
    mex-perf:balancedAccuracy 2.443796e-01 ;
    mex-perf:meanAbsoluteError 5.475824e-01 ;
    mex-perf:r2 3.685996e-01 .

sml:Benchmark6DecisionTreeRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark6DecisionTreeRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.693878e-01 ;
    mex-perf:balancedAccuracy 2.5841e-01 ;
    mex-perf:meanAbsoluteError 5.485882e-01 ;
    mex-perf:r2 2.80851e-01 .

sml:Benchmark70RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark70RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark70RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark70RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark70RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.693878e-01 ;
    mex-perf:balancedAccuracy 2.622423e-01 ;
    mex-perf:meanAbsoluteError 5.231501e-01 ;
    mex-perf:r2 4.106885e-01 .

sml:Benchmark71RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark71RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark71RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark71RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark71RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.755102e-01 ;
    mex-perf:balancedAccuracy 2.75522e-01 ;
    mex-perf:meanAbsoluteError 4.943329e-01 ;
    mex-perf:r2 4.562017e-01 .

sml:Benchmark72RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark72RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark72RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark72RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark72RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.653061e-01 ;
    mex-perf:balancedAccuracy 2.093653e-01 ;
    mex-perf:meanAbsoluteError 5.864853e-01 ;
    mex-perf:r2 4.058314e-02 .

sml:Benchmark73RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark73RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark73RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark73RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark73RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.040816e-01 ;
    mex-perf:balancedAccuracy 2.292482e-01 ;
    mex-perf:meanAbsoluteError 5.266667e-01 ;
    mex-perf:r2 2.163959e-01 .

sml:Benchmark74RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark74RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark74RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark74RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark74RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.928571e-01 ;
    mex-perf:balancedAccuracy 2.334814e-01 ;
    mex-perf:meanAbsoluteError 5.17415e-01 ;
    mex-perf:r2 2.384081e-01 .

sml:Benchmark75RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark75RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark75RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark75RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark75RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.959184e-01 ;
    mex-perf:balancedAccuracy 2.449184e-01 ;
    mex-perf:meanAbsoluteError 5.110998e-01 ;
    mex-perf:r2 2.571076e-01 .

sml:Benchmark76RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark76RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark76RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark76RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark76RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.020408e-01 ;
    mex-perf:balancedAccuracy 2.537067e-01 ;
    mex-perf:meanAbsoluteError 5.079592e-01 ;
    mex-perf:r2 2.700395e-01 .

sml:Benchmark77RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark77RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark77RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark77RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark77RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.94898e-01 ;
    mex-perf:balancedAccuracy 1.674174e-01 ;
    mex-perf:meanAbsoluteError 6.517045e-01 ;
    mex-perf:r2 -4.863125e-04 .

sml:Benchmark78RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark78RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark78RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark78RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark78RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.94898e-01 ;
    mex-perf:balancedAccuracy 1.674174e-01 ;
    mex-perf:meanAbsoluteError 6.533136e-01 ;
    mex-perf:r2 -6.442021e-03 .

sml:Benchmark79RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark79RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark79RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark79RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark79RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.94898e-01 ;
    mex-perf:balancedAccuracy 1.672121e-01 ;
    mex-perf:meanAbsoluteError 6.538842e-01 ;
    mex-perf:r2 -8.894725e-03 .

sml:Benchmark7RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark7RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark7RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark7RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark7RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.357143e-01 ;
    mex-perf:balancedAccuracy 2.110054e-01 ;
    mex-perf:meanAbsoluteError 6.543103e-01 ;
    mex-perf:r2 1.6654e-01 .

sml:Benchmark80RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark80RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark80RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark80RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark80RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.979592e-01 ;
    mex-perf:balancedAccuracy 1.683382e-01 ;
    mex-perf:meanAbsoluteError 6.537656e-01 ;
    mex-perf:r2 -7.830963e-03 .

sml:Benchmark81RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 45 .

sml:Benchmark81RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark81RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark81RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark81RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3.020408e-01 ;
    mex-perf:balancedAccuracy 1.701455e-01 ;
    mex-perf:meanAbsoluteError 6.518835e-01 ;
    mex-perf:r2 2.010258e-03 .

sml:Benchmark82RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark82RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark82RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark82RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark82RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.357143e-01 ;
    mex-perf:balancedAccuracy 2.110054e-01 ;
    mex-perf:meanAbsoluteError 6.538467e-01 ;
    mex-perf:r2 1.683482e-01 .

sml:Benchmark83RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark83RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark83RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark83RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark83RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.530612e-01 ;
    mex-perf:balancedAccuracy 2.165654e-01 ;
    mex-perf:meanAbsoluteError 5.746207e-01 ;
    mex-perf:r2 3.046154e-01 .

sml:Benchmark84RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark84RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark84RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark84RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark84RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.622449e-01 ;
    mex-perf:balancedAccuracy 2.444149e-01 ;
    mex-perf:meanAbsoluteError 5.467404e-01 ;
    mex-perf:r2 3.694883e-01 .

sml:Benchmark85RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark85RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark85RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark85RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark85RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.693878e-01 ;
    mex-perf:balancedAccuracy 2.6122e-01 ;
    mex-perf:meanAbsoluteError 5.231561e-01 ;
    mex-perf:r2 4.108842e-01 .

sml:Benchmark86RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark86RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark86RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark86RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark86RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.704082e-01 ;
    mex-perf:balancedAccuracy 2.762928e-01 ;
    mex-perf:meanAbsoluteError 4.945424e-01 ;
    mex-perf:r2 4.546344e-01 .

sml:Benchmark87RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark87RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark87RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark87RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark87RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.653061e-01 ;
    mex-perf:balancedAccuracy 2.093653e-01 ;
    mex-perf:meanAbsoluteError 5.862709e-01 ;
    mex-perf:r2 3.746416e-02 .

sml:Benchmark88RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark88RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark88RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark88RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark88RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 5.040816e-01 ;
    mex-perf:balancedAccuracy 2.292482e-01 ;
    mex-perf:meanAbsoluteError 5.261596e-01 ;
    mex-perf:r2 2.144055e-01 .

sml:Benchmark89RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark89RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark89RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark89RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark89RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.908163e-01 ;
    mex-perf:balancedAccuracy 2.286499e-01 ;
    mex-perf:meanAbsoluteError 5.175232e-01 ;
    mex-perf:r2 2.352143e-01 .

sml:Benchmark8RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark8RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark8RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark8RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark8RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.459184e-01 ;
    mex-perf:balancedAccuracy 2.133218e-01 ;
    mex-perf:meanAbsoluteError 5.762742e-01 ;
    mex-perf:r2 2.905173e-01 .

sml:Benchmark90RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark90RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark90RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark90RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark90RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.918367e-01 ;
    mex-perf:balancedAccuracy 2.388251e-01 ;
    mex-perf:meanAbsoluteError 5.109555e-01 ;
    mex-perf:r2 2.552398e-01 .

sml:Benchmark91RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark91RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "absolute_error" .

sml:Benchmark91RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark91RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark91RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.938776e-01 ;
    mex-perf:balancedAccuracy 2.447837e-01 ;
    mex-perf:meanAbsoluteError 5.079406e-01 ;
    mex-perf:r2 2.682406e-01 .

sml:Benchmark92RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark92RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark92RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 1 .

sml:Benchmark92RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark92RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.94898e-01 ;
    mex-perf:balancedAccuracy 1.674174e-01 ;
    mex-perf:meanAbsoluteError 6.522284e-01 ;
    mex-perf:r2 -3.641733e-04 .

sml:Benchmark93RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark93RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark93RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 3 .

sml:Benchmark93RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark93RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.94898e-01 ;
    mex-perf:balancedAccuracy 1.674174e-01 ;
    mex-perf:meanAbsoluteError 6.540069e-01 ;
    mex-perf:r2 -6.543898e-03 .

sml:Benchmark94RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark94RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark94RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark94RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark94RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.959184e-01 ;
    mex-perf:balancedAccuracy 1.675874e-01 ;
    mex-perf:meanAbsoluteError 6.544431e-01 ;
    mex-perf:r2 -9.230761e-03 .

sml:Benchmark95RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark95RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark95RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 7 .

sml:Benchmark95RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark95RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 2.979592e-01 ;
    mex-perf:balancedAccuracy 1.683382e-01 ;
    mex-perf:meanAbsoluteError 6.543206e-01 ;
    mex-perf:r2 -8.403691e-03 .

sml:Benchmark96RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 55 .

sml:Benchmark96RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "poisson" .

sml:Benchmark96RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 9 .

sml:Benchmark96RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark96RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 3e-01 ;
    mex-perf:balancedAccuracy 1.693948e-01 ;
    mex-perf:meanAbsoluteError 6.529046e-01 ;
    mex-perf:r2 -1.76323e-04 .

sml:Benchmark9RandomForestRegressorParameter0 a sml:Parameter ;
    sml:ParameterName "nEstimator" ;
    sml:ParameterValue 5 .

sml:Benchmark9RandomForestRegressorParameter1 a sml:Parameter ;
    sml:ParameterName "criterion" ;
    sml:ParameterValue "squared_error" .

sml:Benchmark9RandomForestRegressorParameter2 a sml:Parameter ;
    sml:ParameterName "maxDepth" ;
    sml:ParameterValue 5 .

sml:Benchmark9RandomForestRegressorParameter3 a sml:Parameter ;
    sml:ParameterName "randomState" ;
    sml:ParameterValue 2022 .

sml:Benchmark9RandomForestRegressorPerfomance a mex-perf:RegressionMeasure ;
    mex-perf:accuracy 4.489796e-01 ;
    mex-perf:balancedAccuracy 2.352489e-01 ;
    mex-perf:meanAbsoluteError 5.474304e-01 ;
    mex-perf:r2 3.616402e-01 .

