model,parameters,meanAbsoluteError,accuracy,balancedAccuracy,r2,source_code,dsl_code
LinearRegression,{},0.29413352256290753,0.7826530612244897,0.5,0.17255646028381633,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import LinearRegression
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = LinearRegression(**{})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.LinearRegression

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = LinearRegression();
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RidgeRegression,{},0.2941345350736341,0.7826530612244897,0.5,0.17251060053737866,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RidgeRegression
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RidgeRegression(**{})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RidgeRegression

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RidgeRegression();
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 1},0.29903853993995816,0.7826530612244897,0.5,0.11901340008466743,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 1})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=1);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 3},0.27292740332801874,0.7826530612244897,0.5,0.1972156115292406,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 3})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=3);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 5},0.2500638845084529,0.7826530612244897,0.5016955273579766,0.23078209375199732,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 5})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=5);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 7},0.22735682972324037,0.7938775510204081,0.5376902877499679,0.24037620082628686,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 7})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=7);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeRegressor,{'maxDepth': 9},0.2078594790111937,0.8051020408163265,0.5889447943637488,0.17271912309016713,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression._tree import DecisionTreeRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeRegressor(**{'maxDepth': 9})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.DecisionTreeRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeRegressor(maxDepth=9);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.298864933439313,0.7826530612244897,0.5,0.12844762984419655,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.2792736433905713,0.7826530612244897,0.5,0.18771016210648983,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.255125004292788,0.7826530612244897,0.5,0.25644330824334416,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.2364421437143455,0.7826530612244897,0.5,0.3052144869317025,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.22076449035213538,0.7928571428571428,0.5234741784037559,0.3300521057367275,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.21510204081632653,0.7826530612244897,0.5237373830116728,-0.24147370096283916,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.2116326530612245,0.789795918367347,0.5181274522406057,-0.1764486965250871,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.20938775510204083,0.7877551020408163,0.5168236712758079,-0.17092996921118186,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.2095918367346939,0.7887755102040817,0.5174755617582067,-0.16541124189727685,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.2083673469387755,0.7908163265306123,0.5238659247969346,-0.1610922379124815,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.33560317843489984,0.7826530612244897,0.5016955273579766,0.0017429666454475967,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.33581641737174134,0.7826530612244897,0.5016955273579766,0.0004759849259079463,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.3360720740787932,0.7826530612244897,0.5016955273579766,0.0037081826794613804,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.3345773930468721,0.7826530612244897,0.5016955273579766,0.009076291675399806,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.3310479995271438,0.7826530612244897,0.5016955273579766,0.02350514537426185,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 5, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=5, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.299405730658519,0.7826530612244897,0.5,0.12972823907583608,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.2777088332462559,0.7826530612244897,0.5,0.2087294776256906,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.25553137534970927,0.7826530612244897,0.5,0.2809074196855934,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.237289493342111,0.7826530612244897,0.5,0.3414954837155705,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.22141642460929803,0.7918367346938775,0.5211267605633803,0.38382511579089906,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.2156462585034014,0.7826530612244897,0.5118686915058364,-0.22590395820283637,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.21197278911564627,0.786734693877551,0.5093896713615024,-0.1772218515594024,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.211156462585034,0.7887755102040817,0.5140845070422535,-0.1701834746952915,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.21193877551020407,0.7887755102040817,0.5140845070422535,-0.1644314678451706,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.2097278911564626,0.7887755102040817,0.5140845070422535,-0.1362446347406958,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.3366798118578779,0.7826530612244897,0.5,1.73624968349273e-05,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.3367206825997326,0.7826530612244897,0.5,0.00039212066816274316,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.33597417817572955,0.7826530612244897,0.5016955273579766,0.005635897466485962,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.3335379414500407,0.7826530612244897,0.5016955273579766,0.019475356559235824,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.3307285216067664,0.7826530612244897,0.5016955273579766,0.03238092085254407,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 15, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=15, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.29987826125832495,0.7826530612244897,0.5,0.1277913861156421,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.27860693420838767,0.7826530612244897,0.5,0.20327362046382857,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.2560485665772151,0.7826530612244897,0.5,0.280800092591292,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.23726652392583414,0.7826530612244897,0.5,0.34256112610273837,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.22180320909766688,0.786734693877551,0.5093896713615024,0.391831871070206,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.21559183673469387,0.7826530612244897,0.5118686915058364,-0.2071136248171339,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.21175510204081632,0.7857142857142857,0.5070422535211268,-0.15428740718977063,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.2103673469387755,0.7857142857142857,0.5070422535211268,-0.14586055052610325,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.21161224489795918,0.786734693877551,0.5093896713615024,-0.1309863806917997,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.2095918367346939,0.786734693877551,0.5093896713615024,-0.11227789509766106,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.33784430043737085,0.7826530612244897,0.5,-0.0007433452656548933,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.33788879615696465,0.7826530612244897,0.5,-0.00039121325710556043,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.3372514770778327,0.7826530612244897,0.5016955273579766,0.0043533141564197075,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.33528447120539023,0.7826530612244897,0.5016955273579766,0.015440699427047844,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.33244672513863743,0.7826530612244897,0.5016955273579766,0.02786995576218787,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 25, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=25, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.2996626674645147,0.7826530612244897,0.5,0.12814996894291775,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.27756004709546167,0.7826530612244897,0.5,0.20640859103079767,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.25518953915593034,0.7826530612244897,0.5,0.2834972479642007,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.23667480431451915,0.7826530612244897,0.5,0.3456888209999287,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.22187110347866343,0.7826530612244897,0.5,0.3938940619281953,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.2152478134110787,0.7826530612244897,0.5118686915058364,-0.20294054636379788,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.2108746355685131,0.7857142857142857,0.5070422535211268,-0.15215062648817756,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.20965014577259475,0.7857142857142857,0.5070422535211268,-0.14543217584516221,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.21051020408163265,0.7857142857142857,0.5070422535211268,-0.13063028322040027,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.209067055393586,0.786734693877551,0.5093896713615024,-0.08670939150767287,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.3380187475199416,0.7826530612244897,0.5,-0.0005073326159317215,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.3379501384820538,0.7826530612244897,0.5,0.0003168044667242187,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.3373514165997178,0.7826530612244897,0.5016955273579766,0.004949602376995488,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.3351908572623262,0.7826530612244897,0.5016955273579766,0.017447720997529448,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.3328233173059673,0.7826530612244897,0.5016955273579766,0.027598709307143365,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 35, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=35, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.29984302003268526,0.7826530612244897,0.5,0.12757448110523606,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.27713757994263305,0.7826530612244897,0.5,0.20972854843169753,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.2548056288685186,0.7826530612244897,0.5,0.2840181636100624,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.2363384503654527,0.7826530612244897,0.5,0.3487460355413381,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.22137901158465,0.7826530612244897,0.5,0.3995161721154862,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.2149659863945578,0.7826530612244897,0.5118686915058364,-0.20017359564321202,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.21081632653061225,0.7857142857142857,0.5070422535211268,-0.1476968085440009,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.20941043083900227,0.7857142857142857,0.5070422535211268,-0.1389640076200116,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.2103061224489796,0.7857142857142857,0.5070422535211268,-0.12340981682908958,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.2086848072562358,0.786734693877551,0.5093896713615024,-0.08480168330039684,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.3382684010907038,0.7826530612244897,0.5,-0.0001455832948626945,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.33817576128185417,0.7826530612244897,0.5,0.0007388168499777859,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.33752557876743644,0.7826530612244897,0.5016955273579766,0.005358626932293276,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.33543127085084967,0.7826530612244897,0.5016955273579766,0.017772757419038054,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.3331346234728745,0.7826530612244897,0.5016955273579766,0.028076824482905938,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 45, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=45, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022}",0.2993793129328797,0.7826530612244897,0.5,0.12681787380517873,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022}",0.2768200817789335,0.7826530612244897,0.5,0.2084544544676067,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022}",0.2544022546236024,0.7826530612244897,0.5,0.2856461124937404,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022}",0.23671685024658914,0.7826530612244897,0.5,0.3474880201909879,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022}",0.22183464673698536,0.7826530612244897,0.5,0.39810929372990544,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'squared_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""squared_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022}",0.21512059369202227,0.7826530612244897,0.5,-0.19570376020385782,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022}",0.21098330241187382,0.7826530612244897,0.5,-0.14981880464638353,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022}",0.21029684601113172,0.7826530612244897,0.5,-0.14214255835384781,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022}",0.21095547309833027,0.7826530612244897,0.5,-0.11560438086187363,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022}",0.20968460111317255,0.7826530612244897,0.5,-0.07174755263472465,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'absolute_error', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""absolute_error"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022}",0.3377495455957822,0.7826530612244897,0.5,3.935583714587132e-05,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022}",0.3377249918750881,0.7826530612244897,0.5,0.00014925152784295292,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022}",0.3369128977962618,0.7826530612244897,0.5016955273579766,0.0056800360986553056,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022}",0.33490308891978826,0.7826530612244897,0.5016955273579766,0.017823703476690156,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestRegressor,"{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022}",0.33256713798271126,0.7826530612244897,0.5016955273579766,0.02864407574023864,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.regression import RandomForestRegressor
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestRegressor(**{'nEstimator': 55, 'criterion': 'poisson', 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.regression.RandomForestRegressor

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestRegressor(nEstimator=55, criterion=""poisson"", maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 1},0.2173469387755102,0.7826530612244897,0.5,-0.2777053455019558,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 1})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=1);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 3},0.1989795918367347,0.8010204081632653,0.6032925060139193,-0.1697302458820722,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 3})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=3);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 5},0.18571428571428572,0.8142857142857143,0.6168536643590355,-0.09174822948993411,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 5})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=5);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 7},0.17653061224489797,0.823469387755102,0.6922373003776681,-0.037760679679992304,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 7})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=7);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
DecisionTreeClassifier,{'maxDepth': 9},0.1846938775510204,0.8153061224489796,0.7243237783939622,-0.08574961284438487,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification._tree import DecisionTreeClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = DecisionTreeClassifier(**{'maxDepth': 9})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.DecisionTreeClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = DecisionTreeClassifier(maxDepth=9);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 1, 'randomState': 2022}",0.2173469387755102,0.7826530612244897,0.5,-0.2777053455019558,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 3, 'randomState': 2022}",0.20510204081632652,0.7948979591836735,0.5315600688004603,-0.20572194575536673,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 5, 'randomState': 2022}",0.1846938775510204,0.8153061224489796,0.6310697737052475,-0.08574961284438487,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 7, 'randomState': 2022}",0.16428571428571428,0.8357142857142857,0.6780181305127593,0.03422272006659677,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 5, 'maxDepth': 9, 'randomState': 2022}",0.15816326530612246,0.8418367346938775,0.7073623837768025,0.0702144199398913,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 5, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=5, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 1, 'randomState': 2022}",0.2173469387755102,0.7826530612244897,0.5,-0.2777053455019558,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 3, 'randomState': 2022}",0.20204081632653062,0.7979591836734694,0.538602322321587,-0.18772609581871946,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 5, 'randomState': 2022}",0.1816326530612245,0.8183673469387756,0.6296343904364912,-0.0677537629077376,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 7, 'randomState': 2022}",0.1653061224489796,0.8346938775510204,0.6756707126723837,0.028224103421047753,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 15, 'maxDepth': 9, 'randomState': 2022}",0.15612244897959185,0.8438775510204082,0.6984930005937406,0.08221165323098956,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 15, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=15, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 1, 'randomState': 2022}",0.2173469387755102,0.7826530612244897,0.5,-0.2777053455019558,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 3, 'randomState': 2022}",0.2,0.8,0.5568613768661512,-0.1757288625276212,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 5, 'randomState': 2022}",0.18061224489795918,0.8193877551020409,0.6319818082768668,-0.06175514626218859,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 7, 'randomState': 2022}",0.1673469387755102,0.8326530612244898,0.6743669317075858,0.0162268701299495,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 25, 'maxDepth': 9, 'randomState': 2022}",0.14591836734693878,0.8540816326530613,0.7117940148496367,0.14219781968648038,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 25, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=25, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 1, 'randomState': 2022}",0.2173469387755102,0.7826530612244897,0.5,-0.2777053455019558,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 3, 'randomState': 2022}",0.19693877551020408,0.8030612244897959,0.5554259935973949,-0.15773301259097394,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 5, 'randomState': 2022}",0.17755102040816326,0.8224489795918367,0.6339374797240636,-0.04375929632554132,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 7, 'randomState': 2022}",0.1673469387755102,0.8326530612244898,0.6743669317075858,0.0162268701299495,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 35, 'maxDepth': 9, 'randomState': 2022}",0.14591836734693878,0.8540816326530613,0.7168805969235666,0.14219781968648038,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 35, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=35, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 1, 'randomState': 2022}",0.2173469387755102,0.7826530612244897,0.5,-0.2777053455019558,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 3, 'randomState': 2022}",0.19795918367346937,0.8020408163265306,0.5564696304729726,-0.16373162923652318,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 5, 'randomState': 2022}",0.18061224489795918,0.8193877551020409,0.6302862809188902,-0.06175514626218859,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 7, 'randomState': 2022}",0.17142857142857143,0.8285714285714286,0.6666727877040601,-0.007767596452246783,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 45, 'maxDepth': 9, 'randomState': 2022}",0.14489795918367346,0.8551020408163266,0.7192280147639422,0.1481964363320295,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 45, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=45, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 1, 'randomState': 2022}",0.2173469387755102,0.7826530612244897,0.5,-0.2777053455019558,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 1, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=1, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 3, 'randomState': 2022}",0.19693877551020408,0.8030612244897959,0.5554259935973949,-0.15773301259097394,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 3, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=3, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 5, 'randomState': 2022}",0.1816326530612245,0.8183673469387756,0.6279388630785145,-0.0677537629077376,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 5, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=5, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 7, 'randomState': 2022}",0.1653061224489796,0.8346938775510204,0.6705841305984538,0.028224103421047753,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 7, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=7, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
RandomForestClassifier,"{'nEstimator': 55, 'maxDepth': 9, 'randomState': 2022}",0.14387755102040817,0.8561224489795919,0.7181843778883645,0.15419505297757863,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import RandomForestClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = RandomForestClassifier(**{'nEstimator': 55, 'maxDepth': 9, 'randomState': 2022})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.RandomForestClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = RandomForestClassifier(nEstimator=55, maxDepth=9, randomState=2022);
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
ERRORSupportVectorMachineClassifier,"{'penalty': 'l1', 'loss': 'hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'}","Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True",,
ERRORSupportVectorMachineClassifier,"{'penalty': 'l1', 'loss': 'squared_hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'}","Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True","Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True",,
SupportVectorMachineClassifier,"{'penalty': 'l2', 'loss': 'hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'}",0.2173469387755102,0.7826530612244897,0.5,-0.2777053455019558,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import SupportVectorMachineClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = SupportVectorMachineClassifier(**{'penalty': 'l2', 'loss': 'hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.SupportVectorMachineClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = SupportVectorMachineClassifier(penalty=""l2"", loss=""hinge"", dual=true, tol=0.0001, c=1.0, multiClass=""ovr"");
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
SupportVectorMachineClassifier,"{'penalty': 'l2', 'loss': 'squared_hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'}",0.19489795918367347,0.8051020408163265,0.592335849079702,-0.1457357792998759,"# Imports ----------------------------------------------------------------------
from simpleml.dataset import loadDataset
from simpleml.metrics import meanAbsoluteError,accuracy,balancedAccuracy,r2
from simpleml.dataset import StandardScaler
from simpleml.model.supervised.classification import SupportVectorMachineClassifier
import numpy as np


# Workflow steps ---------------------------------------------------------------
def exampleWorkflow():
    dataset = loadDataset('WhiteWineQualityBinary')
    dataset = dataset.dropAllMissingValues()
    dataset = dataset.transformDatatypes()
    dataset = dataset.setTargetAttribute('quality')
    dataset = StandardScaler().scale(dataset)
    X_train, X_test, y_train, y_test = dataset.splitIntoTrainAndTestAndLabels(0.8)
    model = SupportVectorMachineClassifier(**{'penalty': 'l2', 'loss': 'squared_hinge', 'dual': True, 'tol': 0.0001, 'c': 1.0, 'multiClass': 'ovr'})
    lr = model.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    print('meanAbsoluteError:', meanAbsoluteError(y_test, y_pred))
    print('accuracy:', accuracy(y_test, y_pred))
    print('balancedAccuracy:', balancedAccuracy(y_test, y_pred))
    print('r2:', r2(y_test, y_pred))

if __name__ == '__main__':
    np.random.seed(2022)
    exampleWorkflow()
","package example

import simpleml.metrics.meanAbsoluteError
import simpleml.metrics.accuracy
import simpleml.metrics.balancedAccuracy
import simpleml.metrics.r2

import simpleml.dataset.loadDataset
import simpleml.dataset.StandardScaler
import simpleml.model.supervised.classification.SupportVectorMachineClassifier

workflow exampleWorkflow {
    val dataset1 = loadDataset(""WhiteWineQualityBinary"");
    val dataset2 = dataset1.dropAllMissingValues();
    val dataset3 = dataset2.transformDatatypes();
    val dataset4 = dataset3.setTargetAttribute(""quality"");
    val dataset5 = StandardScaler().scale(dataset4);
    val X_train, val X_test, val y_train, val y_test = dataset5.splitIntoTrainAndTestAndLabels(0.8);
    
    val model = SupportVectorMachineClassifier(penalty=""l2"", loss=""squared_hinge"", dual=true, tol=0.0001, c=1.0, multiClass=""ovr"");
    val lr = model.fit(X_train, y_train);
    val y_pred = lr.predict(X_test);
    
}"
