package example

// TODO: Imports
import simpleml.data.preprocessing.*
// ...

workflow wine {








    // load data
    val df = readCsv("winequality-red.csv", sep=";");

    // explore data 1: histogram
    // NOT IN DSL -> Use IDE features instead


    // explore data 2: correlation matrix
    // NOT IN DSL -> Use IDE features instead




    // convert to a binary classification problem
    val df_binary = df.addAttribute("goodquality", transformIntoBinaryQuality);

    // explore data 3: proportion of good and bad quality wine
    // NOT IN DSL -> Use IDE features instead

    // split dataset into features and target
    val X = df_binary.dropAttributes("quality", "goodquality"); // TODO: instead create an instance of a Dataset class where we declare what the target attribute is
    val y = df_binary.keepAttributes("goodquality");

    // Normalize feature variables
    val X_normalized = StandardScaler().fitTransform(X);

    // Splitting the data into test and training sets
    (val X_train, val X_test, val y_train, val y_test) = split(X_normalized, y, test_size=.25, random_state=1);
    // Possible confusion: (val X_train, val y_train, val X_test, val y_test) -> maybe bundle X and y into a class (Dataset)

    // Models
    val models = listOf(
        DecisionTreeClassifier(random_state=1),
        RandomForestClassifier(random_state=1),
        AdaBoostClassifier(random_state=1),
        GradientBoostingClassifier(random_state=1)
    );

    // Select model
    val model = models.get(0); // TODO: Index could come from some global configuration, e.g. config.currentModelIndex

    // Train models and print results
    model.fit(X_train, y_train);
    y_pred = model.predict(X_test);
    // NOT IN DSL -> Use IDE features instead

    // Model understanding: Feature importance
    // NOT IN DSL -> Use IDE features instead



    // Data understanding: Investigate some important features for the two different targets
    val df_good = df_binary.filterInstances(filterGoodQuality);
    val df_important_good = df_good.keepAttributes("alcohol", "sulphates", "volatile acidity"]);
    // NOT IN DSL -> Use IDE features instead
    val df_bad = df_binary.filterInstances(filterBadQuality);
    val df_important_bad = df_bad.keepAttributes("alcohol", "sulphates", "volatile acidity"]);
    // NOT IN DSL -> Use IDE features instead
}

step transformIntoBinaryQuality(instance: Instance) -> goodQuality: Int {
    yield goodQuality = (instance.getAttribute("quality") >= 7) ? 1 : 0;
}

step filterGoodQuality(instance: Instance) -> isGoodQuality: Boolean {
    yield isGoodQuality = instance.getAttribute("goodquality") == 1;
}

step filterBadQuality(instance: Instance) -> isGoodQuality: Boolean {
    yield isGoodQuality = instance.getAttribute("goodquality") == 0;
}

// TODO: Set deterministicRun = True using the IDE (some configuration dialog); can still set random_state individually
// Determinism could be good so we do not need to store the values of each placeholder but could compute them on
